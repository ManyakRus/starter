// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StarsSubscription represents TL type `starsSubscription#538ecf18`.
//
// See https://core.telegram.org/constructor/starsSubscription for reference.
type StarsSubscription struct {
	// Flags field of StarsSubscription.
	Flags bin.Fields
	// Canceled field of StarsSubscription.
	Canceled bool
	// CanRefulfill field of StarsSubscription.
	CanRefulfill bool
	// MissingBalance field of StarsSubscription.
	MissingBalance bool
	// ID field of StarsSubscription.
	ID string
	// Peer field of StarsSubscription.
	Peer PeerClass
	// UntilDate field of StarsSubscription.
	UntilDate int
	// Pricing field of StarsSubscription.
	Pricing StarsSubscriptionPricing
	// ChatInviteHash field of StarsSubscription.
	//
	// Use SetChatInviteHash and GetChatInviteHash helpers.
	ChatInviteHash string
}

// StarsSubscriptionTypeID is TL type id of StarsSubscription.
const StarsSubscriptionTypeID = 0x538ecf18

// Ensuring interfaces in compile-time for StarsSubscription.
var (
	_ bin.Encoder     = &StarsSubscription{}
	_ bin.Decoder     = &StarsSubscription{}
	_ bin.BareEncoder = &StarsSubscription{}
	_ bin.BareDecoder = &StarsSubscription{}
)

func (s *StarsSubscription) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.Canceled == false) {
		return false
	}
	if !(s.CanRefulfill == false) {
		return false
	}
	if !(s.MissingBalance == false) {
		return false
	}
	if !(s.ID == "") {
		return false
	}
	if !(s.Peer == nil) {
		return false
	}
	if !(s.UntilDate == 0) {
		return false
	}
	if !(s.Pricing.Zero()) {
		return false
	}
	if !(s.ChatInviteHash == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarsSubscription) String() string {
	if s == nil {
		return "StarsSubscription(nil)"
	}
	type Alias StarsSubscription
	return fmt.Sprintf("StarsSubscription%+v", Alias(*s))
}

// FillFrom fills StarsSubscription from given interface.
func (s *StarsSubscription) FillFrom(from interface {
	GetCanceled() (value bool)
	GetCanRefulfill() (value bool)
	GetMissingBalance() (value bool)
	GetID() (value string)
	GetPeer() (value PeerClass)
	GetUntilDate() (value int)
	GetPricing() (value StarsSubscriptionPricing)
	GetChatInviteHash() (value string, ok bool)
}) {
	s.Canceled = from.GetCanceled()
	s.CanRefulfill = from.GetCanRefulfill()
	s.MissingBalance = from.GetMissingBalance()
	s.ID = from.GetID()
	s.Peer = from.GetPeer()
	s.UntilDate = from.GetUntilDate()
	s.Pricing = from.GetPricing()
	if val, ok := from.GetChatInviteHash(); ok {
		s.ChatInviteHash = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarsSubscription) TypeID() uint32 {
	return StarsSubscriptionTypeID
}

// TypeName returns name of type in TL schema.
func (*StarsSubscription) TypeName() string {
	return "starsSubscription"
}

// TypeInfo returns info about TL type.
func (s *StarsSubscription) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starsSubscription",
		ID:   StarsSubscriptionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Canceled",
			SchemaName: "canceled",
			Null:       !s.Flags.Has(0),
		},
		{
			Name:       "CanRefulfill",
			SchemaName: "can_refulfill",
			Null:       !s.Flags.Has(1),
		},
		{
			Name:       "MissingBalance",
			SchemaName: "missing_balance",
			Null:       !s.Flags.Has(2),
		},
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "UntilDate",
			SchemaName: "until_date",
		},
		{
			Name:       "Pricing",
			SchemaName: "pricing",
		},
		{
			Name:       "ChatInviteHash",
			SchemaName: "chat_invite_hash",
			Null:       !s.Flags.Has(3),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (s *StarsSubscription) SetFlags() {
	if !(s.Canceled == false) {
		s.Flags.Set(0)
	}
	if !(s.CanRefulfill == false) {
		s.Flags.Set(1)
	}
	if !(s.MissingBalance == false) {
		s.Flags.Set(2)
	}
	if !(s.ChatInviteHash == "") {
		s.Flags.Set(3)
	}
}

// Encode implements bin.Encoder.
func (s *StarsSubscription) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starsSubscription#538ecf18 as nil")
	}
	b.PutID(StarsSubscriptionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarsSubscription) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starsSubscription#538ecf18 as nil")
	}
	s.SetFlags()
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starsSubscription#538ecf18: field flags: %w", err)
	}
	b.PutString(s.ID)
	if s.Peer == nil {
		return fmt.Errorf("unable to encode starsSubscription#538ecf18: field peer is nil")
	}
	if err := s.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starsSubscription#538ecf18: field peer: %w", err)
	}
	b.PutInt(s.UntilDate)
	if err := s.Pricing.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starsSubscription#538ecf18: field pricing: %w", err)
	}
	if s.Flags.Has(3) {
		b.PutString(s.ChatInviteHash)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarsSubscription) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starsSubscription#538ecf18 to nil")
	}
	if err := b.ConsumeID(StarsSubscriptionTypeID); err != nil {
		return fmt.Errorf("unable to decode starsSubscription#538ecf18: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarsSubscription) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starsSubscription#538ecf18 to nil")
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode starsSubscription#538ecf18: field flags: %w", err)
		}
	}
	s.Canceled = s.Flags.Has(0)
	s.CanRefulfill = s.Flags.Has(1)
	s.MissingBalance = s.Flags.Has(2)
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode starsSubscription#538ecf18: field id: %w", err)
		}
		s.ID = value
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode starsSubscription#538ecf18: field peer: %w", err)
		}
		s.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode starsSubscription#538ecf18: field until_date: %w", err)
		}
		s.UntilDate = value
	}
	{
		if err := s.Pricing.Decode(b); err != nil {
			return fmt.Errorf("unable to decode starsSubscription#538ecf18: field pricing: %w", err)
		}
	}
	if s.Flags.Has(3) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode starsSubscription#538ecf18: field chat_invite_hash: %w", err)
		}
		s.ChatInviteHash = value
	}
	return nil
}

// SetCanceled sets value of Canceled conditional field.
func (s *StarsSubscription) SetCanceled(value bool) {
	if value {
		s.Flags.Set(0)
		s.Canceled = true
	} else {
		s.Flags.Unset(0)
		s.Canceled = false
	}
}

// GetCanceled returns value of Canceled conditional field.
func (s *StarsSubscription) GetCanceled() (value bool) {
	if s == nil {
		return
	}
	return s.Flags.Has(0)
}

// SetCanRefulfill sets value of CanRefulfill conditional field.
func (s *StarsSubscription) SetCanRefulfill(value bool) {
	if value {
		s.Flags.Set(1)
		s.CanRefulfill = true
	} else {
		s.Flags.Unset(1)
		s.CanRefulfill = false
	}
}

// GetCanRefulfill returns value of CanRefulfill conditional field.
func (s *StarsSubscription) GetCanRefulfill() (value bool) {
	if s == nil {
		return
	}
	return s.Flags.Has(1)
}

// SetMissingBalance sets value of MissingBalance conditional field.
func (s *StarsSubscription) SetMissingBalance(value bool) {
	if value {
		s.Flags.Set(2)
		s.MissingBalance = true
	} else {
		s.Flags.Unset(2)
		s.MissingBalance = false
	}
}

// GetMissingBalance returns value of MissingBalance conditional field.
func (s *StarsSubscription) GetMissingBalance() (value bool) {
	if s == nil {
		return
	}
	return s.Flags.Has(2)
}

// GetID returns value of ID field.
func (s *StarsSubscription) GetID() (value string) {
	if s == nil {
		return
	}
	return s.ID
}

// GetPeer returns value of Peer field.
func (s *StarsSubscription) GetPeer() (value PeerClass) {
	if s == nil {
		return
	}
	return s.Peer
}

// GetUntilDate returns value of UntilDate field.
func (s *StarsSubscription) GetUntilDate() (value int) {
	if s == nil {
		return
	}
	return s.UntilDate
}

// GetPricing returns value of Pricing field.
func (s *StarsSubscription) GetPricing() (value StarsSubscriptionPricing) {
	if s == nil {
		return
	}
	return s.Pricing
}

// SetChatInviteHash sets value of ChatInviteHash conditional field.
func (s *StarsSubscription) SetChatInviteHash(value string) {
	s.Flags.Set(3)
	s.ChatInviteHash = value
}

// GetChatInviteHash returns value of ChatInviteHash conditional field and
// boolean which is true if field was set.
func (s *StarsSubscription) GetChatInviteHash() (value string, ok bool) {
	if s == nil {
		return
	}
	if !s.Flags.Has(3) {
		return value, false
	}
	return s.ChatInviteHash, true
}
