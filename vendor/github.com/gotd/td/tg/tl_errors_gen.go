// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// Telegram API error types.
const (
	Err2FAConfirmWait                   = "2FA_CONFIRM_WAIT"
	ErrAboutTooLong                     = "ABOUT_TOO_LONG"
	ErrAccessTokenExpired               = "ACCESS_TOKEN_EXPIRED"
	ErrAccessTokenInvalid               = "ACCESS_TOKEN_INVALID"
	ErrAdminsTooMuch                    = "ADMINS_TOO_MUCH"
	ErrAdminIDInvalid                   = "ADMIN_ID_INVALID"
	ErrAdminRankEmojiNotAllowed         = "ADMIN_RANK_EMOJI_NOT_ALLOWED"
	ErrAdminRankInvalid                 = "ADMIN_RANK_INVALID"
	ErrAlbumPhotosTooMany               = "ALBUM_PHOTOS_TOO_MANY"
	ErrAPIIDInvalid                     = "API_ID_INVALID"
	ErrAPIIDPublishedFlood              = "API_ID_PUBLISHED_FLOOD"
	ErrArticleTitleEmpty                = "ARTICLE_TITLE_EMPTY"
	ErrAudioContentURLEmpty             = "AUDIO_CONTENT_URL_EMPTY"
	ErrAudioTitleEmpty                  = "AUDIO_TITLE_EMPTY"
	ErrAuthBytesInvalid                 = "AUTH_BYTES_INVALID"
	ErrAuthRestart                      = "AUTH_RESTART"
	ErrAuthTokenAlreadyAccepted         = "AUTH_TOKEN_ALREADY_ACCEPTED"
	ErrAuthTokenException               = "AUTH_TOKEN_EXCEPTION"
	ErrAuthTokenExpired                 = "AUTH_TOKEN_EXPIRED"
	ErrAuthTokenInvalid                 = "AUTH_TOKEN_INVALID"
	ErrAuthTokenInvalidx                = "AUTH_TOKEN_INVALIDX"
	ErrAutoarchiveNotAvailable          = "AUTOARCHIVE_NOT_AVAILABLE"
	ErrBankCardNumberInvalid            = "BANK_CARD_NUMBER_INVALID"
	ErrBannedRightsInvalid              = "BANNED_RIGHTS_INVALID"
	ErrBotsTooMuch                      = "BOTS_TOO_MUCH"
	ErrBotAppInvalid                    = "BOT_APP_INVALID"
	ErrBotChannelsNa                    = "BOT_CHANNELS_NA"
	ErrBotCommandDescriptionInvalid     = "BOT_COMMAND_DESCRIPTION_INVALID"
	ErrBotCommandInvalid                = "BOT_COMMAND_INVALID"
	ErrBotDomainInvalid                 = "BOT_DOMAIN_INVALID"
	ErrBotGroupsBlocked                 = "BOT_GROUPS_BLOCKED"
	ErrBotInlineDisabled                = "BOT_INLINE_DISABLED"
	ErrBotInvalid                       = "BOT_INVALID"
	ErrBotMissing                       = "BOT_MISSING"
	ErrBotOnesideNotAvail               = "BOT_ONESIDE_NOT_AVAIL"
	ErrBotPaymentsDisabled              = "BOT_PAYMENTS_DISABLED"
	ErrBotResponseTimeout               = "BOT_RESPONSE_TIMEOUT"
	ErrBotScoreNotModified              = "BOT_SCORE_NOT_MODIFIED"
	ErrBroadcastForbidden               = "BROADCAST_FORBIDDEN"
	ErrBroadcastIDInvalid               = "BROADCAST_ID_INVALID"
	ErrBroadcastPublicVotersForbidden   = "BROADCAST_PUBLIC_VOTERS_FORBIDDEN"
	ErrBroadcastRequired                = "BROADCAST_REQUIRED"
	ErrButtonDataInvalid                = "BUTTON_DATA_INVALID"
	ErrButtonTextInvalid                = "BUTTON_TEXT_INVALID"
	ErrButtonTypeInvalid                = "BUTTON_TYPE_INVALID"
	ErrButtonURLInvalid                 = "BUTTON_URL_INVALID"
	ErrButtonUserPrivacyRestricted      = "BUTTON_USER_PRIVACY_RESTRICTED"
	ErrCallAlreadyAccepted              = "CALL_ALREADY_ACCEPTED"
	ErrCallAlreadyDeclined              = "CALL_ALREADY_DECLINED"
	ErrCallOccupyFailed                 = "CALL_OCCUPY_FAILED"
	ErrCallPeerInvalid                  = "CALL_PEER_INVALID"
	ErrCallProtocolFlagsInvalid         = "CALL_PROTOCOL_FLAGS_INVALID"
	ErrCDNMethodInvalid                 = "CDN_METHOD_INVALID"
	ErrCDNUploadTimeout                 = "CDN_UPLOAD_TIMEOUT"
	ErrChannelsAdminLocatedTooMuch      = "CHANNELS_ADMIN_LOCATED_TOO_MUCH"
	ErrChannelsAdminPublicTooMuch       = "CHANNELS_ADMIN_PUBLIC_TOO_MUCH"
	ErrChannelsTooMuch                  = "CHANNELS_TOO_MUCH"
	ErrChannelForumMissing              = "CHANNEL_FORUM_MISSING"
	ErrChannelIDGenerateFailed          = "CHANNEL_ID_GENERATE_FAILED"
	ErrChannelIDInvalid                 = "CHANNEL_ID_INVALID"
	ErrChannelInvalid                   = "CHANNEL_INVALID"
	ErrChannelParicipantMissing         = "CHANNEL_PARICIPANT_MISSING"
	ErrChannelPrivate                   = "CHANNEL_PRIVATE"
	ErrChannelPublicGroupNa             = "CHANNEL_PUBLIC_GROUP_NA"
	ErrChannelTooBig                    = "CHANNEL_TOO_BIG"
	ErrChannelTooLarge                  = "CHANNEL_TOO_LARGE"
	ErrChatlistExcludeInvalid           = "CHATLIST_EXCLUDE_INVALID"
	ErrChatAboutNotModified             = "CHAT_ABOUT_NOT_MODIFIED"
	ErrChatAboutTooLong                 = "CHAT_ABOUT_TOO_LONG"
	ErrChatAdminInviteRequired          = "CHAT_ADMIN_INVITE_REQUIRED"
	ErrChatAdminRequired                = "CHAT_ADMIN_REQUIRED"
	ErrChatDiscussionUnallowed          = "CHAT_DISCUSSION_UNALLOWED"
	ErrChatForwardsRestricted           = "CHAT_FORWARDS_RESTRICTED"
	ErrChatGuestSendForbidden           = "CHAT_GUEST_SEND_FORBIDDEN"
	ErrChatIDEmpty                      = "CHAT_ID_EMPTY"
	ErrChatIDGenerateFailed             = "CHAT_ID_GENERATE_FAILED"
	ErrChatIDInvalid                    = "CHAT_ID_INVALID"
	ErrChatInvalid                      = "CHAT_INVALID"
	ErrChatInvitePermanent              = "CHAT_INVITE_PERMANENT"
	ErrChatLinkExists                   = "CHAT_LINK_EXISTS"
	ErrChatMembersChannel               = "CHAT_MEMBERS_CHANNEL"
	ErrChatNotModified                  = "CHAT_NOT_MODIFIED"
	ErrChatPublicRequired               = "CHAT_PUBLIC_REQUIRED"
	ErrChatRestricted                   = "CHAT_RESTRICTED"
	ErrChatRevokeDateUnsupported        = "CHAT_REVOKE_DATE_UNSUPPORTED"
	ErrChatSendAudiosForbidden          = "CHAT_SEND_AUDIOS_FORBIDDEN"
	ErrChatSendDocsForbidden            = "CHAT_SEND_DOCS_FORBIDDEN"
	ErrChatSendGameForbidden            = "CHAT_SEND_GAME_FORBIDDEN"
	ErrChatSendGifsForbidden            = "CHAT_SEND_GIFS_FORBIDDEN"
	ErrChatSendInlineForbidden          = "CHAT_SEND_INLINE_FORBIDDEN"
	ErrChatSendMediaForbidden           = "CHAT_SEND_MEDIA_FORBIDDEN"
	ErrChatSendPhotosForbidden          = "CHAT_SEND_PHOTOS_FORBIDDEN"
	ErrChatSendPlainForbidden           = "CHAT_SEND_PLAIN_FORBIDDEN"
	ErrChatSendPollForbidden            = "CHAT_SEND_POLL_FORBIDDEN"
	ErrChatSendStickersForbidden        = "CHAT_SEND_STICKERS_FORBIDDEN"
	ErrChatSendVideosForbidden          = "CHAT_SEND_VIDEOS_FORBIDDEN"
	ErrChatSendVoicesForbidden          = "CHAT_SEND_VOICES_FORBIDDEN"
	ErrChatTitleEmpty                   = "CHAT_TITLE_EMPTY"
	ErrChatTooBig                       = "CHAT_TOO_BIG"
	ErrChatWriteForbidden               = "CHAT_WRITE_FORBIDDEN"
	ErrCodeEmpty                        = "CODE_EMPTY"
	ErrCodeHashInvalid                  = "CODE_HASH_INVALID"
	ErrCodeInvalid                      = "CODE_INVALID"
	ErrConnectionAPIIDInvalid           = "CONNECTION_API_ID_INVALID"
	ErrConnectionAppVersionEmpty        = "CONNECTION_APP_VERSION_EMPTY"
	ErrConnectionLayerInvalid           = "CONNECTION_LAYER_INVALID"
	ErrContactAddMissing                = "CONTACT_ADD_MISSING"
	ErrContactIDInvalid                 = "CONTACT_ID_INVALID"
	ErrContactNameEmpty                 = "CONTACT_NAME_EMPTY"
	ErrContactReqMissing                = "CONTACT_REQ_MISSING"
	ErrCreateCallFailed                 = "CREATE_CALL_FAILED"
	ErrCurrencyTotalAmountInvalid       = "CURRENCY_TOTAL_AMOUNT_INVALID"
	ErrDataInvalid                      = "DATA_INVALID"
	ErrDataJSONInvalid                  = "DATA_JSON_INVALID"
	ErrDataTooLong                      = "DATA_TOO_LONG"
	ErrDateEmpty                        = "DATE_EMPTY"
	ErrDCIDInvalid                      = "DC_ID_INVALID"
	ErrDhGAInvalid                      = "DH_G_A_INVALID"
	ErrDocumentInvalid                  = "DOCUMENT_INVALID"
	ErrEditBotInviteForbidden           = "EDIT_BOT_INVITE_FORBIDDEN"
	ErrEmailHashExpired                 = "EMAIL_HASH_EXPIRED"
	ErrEmailInvalid                     = "EMAIL_INVALID"
	ErrEmailNotSetup                    = "EMAIL_NOT_SETUP"
	ErrEmailUnconfirmed                 = "EMAIL_UNCONFIRMED"
	ErrEmailVerifyExpired               = "EMAIL_VERIFY_EXPIRED"
	ErrEmojiInvalid                     = "EMOJI_INVALID"
	ErrEmojiMarkupInvalid               = "EMOJI_MARKUP_INVALID"
	ErrEmojiNotModified                 = "EMOJI_NOT_MODIFIED"
	ErrEmoticonEmpty                    = "EMOTICON_EMPTY"
	ErrEmoticonInvalid                  = "EMOTICON_INVALID"
	ErrEmoticonStickerpackMissing       = "EMOTICON_STICKERPACK_MISSING"
	ErrEncryptedMessageInvalid          = "ENCRYPTED_MESSAGE_INVALID"
	ErrEncryptionAlreadyAccepted        = "ENCRYPTION_ALREADY_ACCEPTED"
	ErrEncryptionAlreadyDeclined        = "ENCRYPTION_ALREADY_DECLINED"
	ErrEncryptionDeclined               = "ENCRYPTION_DECLINED"
	ErrEncryptionIDInvalid              = "ENCRYPTION_ID_INVALID"
	ErrEntitiesTooLong                  = "ENTITIES_TOO_LONG"
	ErrEntityBoundsInvalid              = "ENTITY_BOUNDS_INVALID"
	ErrEntityMentionUserInvalid         = "ENTITY_MENTION_USER_INVALID"
	ErrErrorTextEmpty                   = "ERROR_TEXT_EMPTY"
	ErrExpireDateInvalid                = "EXPIRE_DATE_INVALID"
	ErrExternalURLInvalid               = "EXTERNAL_URL_INVALID"
	ErrFilerefUpgradeNeeded             = "FILEREF_UPGRADE_NEEDED"
	ErrFileContentTypeInvalid           = "FILE_CONTENT_TYPE_INVALID"
	ErrFileEmtpy                        = "FILE_EMTPY"
	ErrFileIDInvalid                    = "FILE_ID_INVALID"
	ErrFilePartsInvalid                 = "FILE_PARTS_INVALID"
	ErrFilePartEmpty                    = "FILE_PART_EMPTY"
	ErrFilePartInvalid                  = "FILE_PART_INVALID"
	ErrFilePartLengthInvalid            = "FILE_PART_LENGTH_INVALID"
	ErrFilePartSizeChanged              = "FILE_PART_SIZE_CHANGED"
	ErrFilePartSizeInvalid              = "FILE_PART_SIZE_INVALID"
	ErrFilePartTooBig                   = "FILE_PART_TOO_BIG"
	ErrFileReference                    = "FILE_REFERENCE"
	ErrFileReferenceEmpty               = "FILE_REFERENCE_EMPTY"
	ErrFileReferenceExpired             = "FILE_REFERENCE_EXPIRED"
	ErrFileReferenceInvalid             = "FILE_REFERENCE_INVALID"
	ErrFileTitleEmpty                   = "FILE_TITLE_EMPTY"
	ErrFileTokenInvalid                 = "FILE_TOKEN_INVALID"
	ErrFileWriteEmpty                   = "FILE_WRITE_EMPTY"
	ErrFilterIDInvalid                  = "FILTER_ID_INVALID"
	ErrFilterIncludeEmpty               = "FILTER_INCLUDE_EMPTY"
	ErrFilterNotSupported               = "FILTER_NOT_SUPPORTED"
	ErrFilterTitleEmpty                 = "FILTER_TITLE_EMPTY"
	ErrFirstnameInvalid                 = "FIRSTNAME_INVALID"
	ErrFolderIDInvalid                  = "FOLDER_ID_INVALID"
	ErrFreshChangeAdminsForbidden       = "FRESH_CHANGE_ADMINS_FORBIDDEN"
	ErrFreshChangePhoneForbidden        = "FRESH_CHANGE_PHONE_FORBIDDEN"
	ErrFreshResetAuthorisationForbidden = "FRESH_RESET_AUTHORISATION_FORBIDDEN"
	ErrFromMessageBotDisabled           = "FROM_MESSAGE_BOT_DISABLED"
	ErrFromPeerInvalid                  = "FROM_PEER_INVALID"
	ErrGameBotInvalid                   = "GAME_BOT_INVALID"
	ErrGeoPointInvalid                  = "GEO_POINT_INVALID"
	ErrGifContentTypeInvalid            = "GIF_CONTENT_TYPE_INVALID"
	ErrGifIDInvalid                     = "GIF_ID_INVALID"
	ErrGraphExpiredReload               = "GRAPH_EXPIRED_RELOAD"
	ErrGraphInvalidReload               = "GRAPH_INVALID_RELOAD"
	ErrGraphOutdatedReload              = "GRAPH_OUTDATED_RELOAD"
	ErrGroupcallAlreadyDiscarded        = "GROUPCALL_ALREADY_DISCARDED"
	ErrGroupcallAlreadyStarted          = "GROUPCALL_ALREADY_STARTED"
	ErrGroupcallForbidden               = "GROUPCALL_FORBIDDEN"
	ErrGroupcallInvalid                 = "GROUPCALL_INVALID"
	ErrGroupcallJoinMissing             = "GROUPCALL_JOIN_MISSING"
	ErrGroupcallNotModified             = "GROUPCALL_NOT_MODIFIED"
	ErrGroupcallSsrcDuplicateMuch       = "GROUPCALL_SSRC_DUPLICATE_MUCH"
	ErrGroupedMediaInvalid              = "GROUPED_MEDIA_INVALID"
	ErrHashInvalid                      = "HASH_INVALID"
	ErrHideRequesterMissing             = "HIDE_REQUESTER_MISSING"
	ErrImageProcessFailed               = "IMAGE_PROCESS_FAILED"
	ErrImportFileInvalid                = "IMPORT_FILE_INVALID"
	ErrImportFormatUnrecognized         = "IMPORT_FORMAT_UNRECOGNIZED"
	ErrImportIDInvalid                  = "IMPORT_ID_INVALID"
	ErrImportTokenInvalid               = "IMPORT_TOKEN_INVALID"
	ErrInlineBotRequired                = "INLINE_BOT_REQUIRED"
	ErrInlineResultExpired              = "INLINE_RESULT_EXPIRED"
	ErrInputChatlistInvalid             = "INPUT_CHATLIST_INVALID"
	ErrInputFilterInvalid               = "INPUT_FILTER_INVALID"
	ErrInputTextEmpty                   = "INPUT_TEXT_EMPTY"
	ErrInputUserDeactivated             = "INPUT_USER_DEACTIVATED"
	ErrInvitesTooMuch                   = "INVITES_TOO_MUCH"
	ErrInviteForbiddenWithJoinas        = "INVITE_FORBIDDEN_WITH_JOINAS"
	ErrInviteHashEmpty                  = "INVITE_HASH_EMPTY"
	ErrInviteHashExpired                = "INVITE_HASH_EXPIRED"
	ErrInviteHashInvalid                = "INVITE_HASH_INVALID"
	ErrInviteRequestSent                = "INVITE_REQUEST_SENT"
	ErrInviteRevokedMissing             = "INVITE_REVOKED_MISSING"
	ErrInviteSlugEmpty                  = "INVITE_SLUG_EMPTY"
	ErrInvoicePayloadInvalid            = "INVOICE_PAYLOAD_INVALID"
	ErrJoinAsPeerInvalid                = "JOIN_AS_PEER_INVALID"
	ErrLangCodeInvalid                  = "LANG_CODE_INVALID"
	ErrLangCodeNotSupported             = "LANG_CODE_NOT_SUPPORTED"
	ErrLangPackInvalid                  = "LANG_PACK_INVALID"
	ErrLastnameInvalid                  = "LASTNAME_INVALID"
	ErrLimitInvalid                     = "LIMIT_INVALID"
	ErrLinkNotModified                  = "LINK_NOT_MODIFIED"
	ErrLocationInvalid                  = "LOCATION_INVALID"
	ErrMaxDateInvalid                   = "MAX_DATE_INVALID"
	ErrMaxIDInvalid                     = "MAX_ID_INVALID"
	ErrMaxQtsInvalid                    = "MAX_QTS_INVALID"
	ErrMD5ChecksumInvalid               = "MD5_CHECKSUM_INVALID"
	ErrMediaCaptionTooLong              = "MEDIA_CAPTION_TOO_LONG"
	ErrMediaEmpty                       = "MEDIA_EMPTY"
	ErrMediaGroupedInvalid              = "MEDIA_GROUPED_INVALID"
	ErrMediaInvalid                     = "MEDIA_INVALID"
	ErrMediaNewInvalid                  = "MEDIA_NEW_INVALID"
	ErrMediaPrevInvalid                 = "MEDIA_PREV_INVALID"
	ErrMediaTTLInvalid                  = "MEDIA_TTL_INVALID"
	ErrMegagroupIDInvalid               = "MEGAGROUP_ID_INVALID"
	ErrMegagroupPrehistoryHidden        = "MEGAGROUP_PREHISTORY_HIDDEN"
	ErrMegagroupRequired                = "MEGAGROUP_REQUIRED"
	ErrMemberChatAddFailed              = "MEMBER_CHAT_ADD_FAILED"
	ErrMessageAuthorRequired            = "MESSAGE_AUTHOR_REQUIRED"
	ErrMessageDeleteForbidden           = "MESSAGE_DELETE_FORBIDDEN"
	ErrMessageEditTimeExpired           = "MESSAGE_EDIT_TIME_EXPIRED"
	ErrMessageEmpty                     = "MESSAGE_EMPTY"
	ErrMessageIDsEmpty                  = "MESSAGE_IDS_EMPTY"
	ErrMessageIDInvalid                 = "MESSAGE_ID_INVALID"
	ErrMessageNotModified               = "MESSAGE_NOT_MODIFIED"
	ErrMessagePollClosed                = "MESSAGE_POLL_CLOSED"
	ErrMessageTooLong                   = "MESSAGE_TOO_LONG"
	ErrMethodInvalid                    = "METHOD_INVALID"
	ErrMinDateInvalid                   = "MIN_DATE_INVALID"
	ErrMsgIDInvalid                     = "MSG_ID_INVALID"
	ErrMsgTooOld                        = "MSG_TOO_OLD"
	ErrMsgWaitFailed                    = "MSG_WAIT_FAILED"
	ErrMultiMediaTooLong                = "MULTI_MEDIA_TOO_LONG"
	ErrNewSaltInvalid                   = "NEW_SALT_INVALID"
	ErrNewSettingsEmpty                 = "NEW_SETTINGS_EMPTY"
	ErrNewSettingsInvalid               = "NEW_SETTINGS_INVALID"
	ErrNextOffsetInvalid                = "NEXT_OFFSET_INVALID"
	ErrOffsetInvalid                    = "OFFSET_INVALID"
	ErrOffsetPeerIDInvalid              = "OFFSET_PEER_ID_INVALID"
	ErrOptionsTooMuch                   = "OPTIONS_TOO_MUCH"
	ErrOptionInvalid                    = "OPTION_INVALID"
	ErrOrderInvalid                     = "ORDER_INVALID"
	ErrPackShortNameInvalid             = "PACK_SHORT_NAME_INVALID"
	ErrPackShortNameOccupied            = "PACK_SHORT_NAME_OCCUPIED"
	ErrPackTitleInvalid                 = "PACK_TITLE_INVALID"
	ErrParticipantsTooFew               = "PARTICIPANTS_TOO_FEW"
	ErrParticipantIDInvalid             = "PARTICIPANT_ID_INVALID"
	ErrParticipantJoinMissing           = "PARTICIPANT_JOIN_MISSING"
	ErrParticipantVersionOutdated       = "PARTICIPANT_VERSION_OUTDATED"
	ErrPasswordEmpty                    = "PASSWORD_EMPTY"
	ErrPasswordHashInvalid              = "PASSWORD_HASH_INVALID"
	ErrPasswordMissing                  = "PASSWORD_MISSING"
	ErrPasswordRecoveryExpired          = "PASSWORD_RECOVERY_EXPIRED"
	ErrPasswordRecoveryNa               = "PASSWORD_RECOVERY_NA"
	ErrPasswordRequired                 = "PASSWORD_REQUIRED"
	ErrPasswordTooFresh                 = "PASSWORD_TOO_FRESH"
	ErrPaymentProviderInvalid           = "PAYMENT_PROVIDER_INVALID"
	ErrPaymentUnsupported               = "PAYMENT_UNSUPPORTED"
	ErrPeersListEmpty                   = "PEERS_LIST_EMPTY"
	ErrPeerHistoryEmpty                 = "PEER_HISTORY_EMPTY"
	ErrPeerIDInvalid                    = "PEER_ID_INVALID"
	ErrPeerIDNotSupported               = "PEER_ID_NOT_SUPPORTED"
	ErrPersistentTimestampEmpty         = "PERSISTENT_TIMESTAMP_EMPTY"
	ErrPersistentTimestampInvalid       = "PERSISTENT_TIMESTAMP_INVALID"
	ErrPersistentTimestampOutdated      = "PERSISTENT_TIMESTAMP_OUTDATED"
	ErrPhoneCodeEmpty                   = "PHONE_CODE_EMPTY"
	ErrPhoneCodeExpired                 = "PHONE_CODE_EXPIRED"
	ErrPhoneCodeHashEmpty               = "PHONE_CODE_HASH_EMPTY"
	ErrPhoneCodeInvalid                 = "PHONE_CODE_INVALID"
	ErrPhoneHashExpired                 = "PHONE_HASH_EXPIRED"
	ErrPhoneNotOccupied                 = "PHONE_NOT_OCCUPIED"
	ErrPhoneNumberAppSignupForbidden    = "PHONE_NUMBER_APP_SIGNUP_FORBIDDEN"
	ErrPhoneNumberBanned                = "PHONE_NUMBER_BANNED"
	ErrPhoneNumberFlood                 = "PHONE_NUMBER_FLOOD"
	ErrPhoneNumberInvalid               = "PHONE_NUMBER_INVALID"
	ErrPhoneNumberOccupied              = "PHONE_NUMBER_OCCUPIED"
	ErrPhoneNumberUnoccupied            = "PHONE_NUMBER_UNOCCUPIED"
	ErrPhonePasswordFlood               = "PHONE_PASSWORD_FLOOD"
	ErrPhonePasswordProtected           = "PHONE_PASSWORD_PROTECTED"
	ErrPhotoContentTypeInvalid          = "PHOTO_CONTENT_TYPE_INVALID"
	ErrPhotoContentURLEmpty             = "PHOTO_CONTENT_URL_EMPTY"
	ErrPhotoCropFileMissing             = "PHOTO_CROP_FILE_MISSING"
	ErrPhotoCropSizeSmall               = "PHOTO_CROP_SIZE_SMALL"
	ErrPhotoExtInvalid                  = "PHOTO_EXT_INVALID"
	ErrPhotoFileMissing                 = "PHOTO_FILE_MISSING"
	ErrPhotoIDInvalid                   = "PHOTO_ID_INVALID"
	ErrPhotoInvalid                     = "PHOTO_INVALID"
	ErrPhotoInvalidDimensions           = "PHOTO_INVALID_DIMENSIONS"
	ErrPhotoSaveFileInvalid             = "PHOTO_SAVE_FILE_INVALID"
	ErrPhotoThumbURLEmpty               = "PHOTO_THUMB_URL_EMPTY"
	ErrPinnedDialogsTooMuch             = "PINNED_DIALOGS_TOO_MUCH"
	ErrPinRestricted                    = "PIN_RESTRICTED"
	ErrPollAnswersInvalid               = "POLL_ANSWERS_INVALID"
	ErrPollAnswerInvalid                = "POLL_ANSWER_INVALID"
	ErrPollOptionDuplicate              = "POLL_OPTION_DUPLICATE"
	ErrPollOptionInvalid                = "POLL_OPTION_INVALID"
	ErrPollQuestionInvalid              = "POLL_QUESTION_INVALID"
	ErrPollVoteRequired                 = "POLL_VOTE_REQUIRED"
	ErrPremiumAccountRequired           = "PREMIUM_ACCOUNT_REQUIRED"
	ErrPreviousChatImportActiveWaitMin  = "PREVIOUS_CHAT_IMPORT_ACTIVE_WAIT_MIN"
	ErrPrivacyKeyInvalid                = "PRIVACY_KEY_INVALID"
	ErrPrivacyTooLong                   = "PRIVACY_TOO_LONG"
	ErrPrivacyValueInvalid              = "PRIVACY_VALUE_INVALID"
	ErrPublicChannelMissing             = "PUBLIC_CHANNEL_MISSING"
	ErrPublicKeyRequired                = "PUBLIC_KEY_REQUIRED"
	ErrQueryIDEmpty                     = "QUERY_ID_EMPTY"
	ErrQueryIDInvalid                   = "QUERY_ID_INVALID"
	ErrQueryTooShort                    = "QUERY_TOO_SHORT"
	ErrQuizAnswerMissing                = "QUIZ_ANSWER_MISSING"
	ErrQuizCorrectAnswersEmpty          = "QUIZ_CORRECT_ANSWERS_EMPTY"
	ErrQuizCorrectAnswersTooMuch        = "QUIZ_CORRECT_ANSWERS_TOO_MUCH"
	ErrQuizCorrectAnswerInvalid         = "QUIZ_CORRECT_ANSWER_INVALID"
	ErrQuizMultipleInvalid              = "QUIZ_MULTIPLE_INVALID"
	ErrRandomIDDuplicate                = "RANDOM_ID_DUPLICATE"
	ErrRandomIDEmpty                    = "RANDOM_ID_EMPTY"
	ErrRandomIDInvalid                  = "RANDOM_ID_INVALID"
	ErrRandomLengthInvalid              = "RANDOM_LENGTH_INVALID"
	ErrRangesInvalid                    = "RANGES_INVALID"
	ErrReactionsTooMany                 = "REACTIONS_TOO_MANY"
	ErrReactionEmpty                    = "REACTION_EMPTY"
	ErrReactionInvalid                  = "REACTION_INVALID"
	ErrReplyMarkupBuyEmpty              = "REPLY_MARKUP_BUY_EMPTY"
	ErrReplyMarkupInvalid               = "REPLY_MARKUP_INVALID"
	ErrReplyMarkupTooLong               = "REPLY_MARKUP_TOO_LONG"
	ErrResetRequestMissing              = "RESET_REQUEST_MISSING"
	ErrResultsTooMuch                   = "RESULTS_TOO_MUCH"
	ErrResultIDDuplicate                = "RESULT_ID_DUPLICATE"
	ErrResultIDEmpty                    = "RESULT_ID_EMPTY"
	ErrResultIDInvalid                  = "RESULT_ID_INVALID"
	ErrResultTypeInvalid                = "RESULT_TYPE_INVALID"
	ErrRevoteNotAllowed                 = "REVOTE_NOT_ALLOWED"
	ErrRightsNotModified                = "RIGHTS_NOT_MODIFIED"
	ErrRightForbidden                   = "RIGHT_FORBIDDEN"
	ErrRsaDecryptFailed                 = "RSA_DECRYPT_FAILED"
	ErrScheduleBotNotAllowed            = "SCHEDULE_BOT_NOT_ALLOWED"
	ErrScheduleDateInvalid              = "SCHEDULE_DATE_INVALID"
	ErrScheduleDateTooLate              = "SCHEDULE_DATE_TOO_LATE"
	ErrScheduleStatusPrivate            = "SCHEDULE_STATUS_PRIVATE"
	ErrScheduleTooMuch                  = "SCHEDULE_TOO_MUCH"
	ErrScoreInvalid                     = "SCORE_INVALID"
	ErrSearchQueryEmpty                 = "SEARCH_QUERY_EMPTY"
	ErrSearchWithLinkNotSupported       = "SEARCH_WITH_LINK_NOT_SUPPORTED"
	ErrSecondsInvalid                   = "SECONDS_INVALID"
	ErrSendAsPeerInvalid                = "SEND_AS_PEER_INVALID"
	ErrSendCodeUnavailable              = "SEND_CODE_UNAVAILABLE"
	ErrSendMessageMediaInvalid          = "SEND_MESSAGE_MEDIA_INVALID"
	ErrSendMessageTypeInvalid           = "SEND_MESSAGE_TYPE_INVALID"
	ErrSensitiveChangeForbidden         = "SENSITIVE_CHANGE_FORBIDDEN"
	ErrSessionTooFresh                  = "SESSION_TOO_FRESH"
	ErrSettingsInvalid                  = "SETTINGS_INVALID"
	ErrSHA256HashInvalid                = "SHA256_HASH_INVALID"
	ErrShortNameInvalid                 = "SHORT_NAME_INVALID"
	ErrShortNameOccupied                = "SHORT_NAME_OCCUPIED"
	ErrSignInFailed                     = "SIGN_IN_FAILED"
	ErrSlowmodeMultiMsgsDisabled        = "SLOWMODE_MULTI_MSGS_DISABLED"
	ErrSlowmodeWait                     = "SLOWMODE_WAIT"
	ErrSMSCodeCreateFailed              = "SMS_CODE_CREATE_FAILED"
	ErrSRPIDInvalid                     = "SRP_ID_INVALID"
	ErrSRPPasswordChanged               = "SRP_PASSWORD_CHANGED"
	ErrStartParamEmpty                  = "START_PARAM_EMPTY"
	ErrStartParamInvalid                = "START_PARAM_INVALID"
	ErrStartParamTooLong                = "START_PARAM_TOO_LONG"
	ErrStickerpackStickersTooMuch       = "STICKERPACK_STICKERS_TOO_MUCH"
	ErrStickersetInvalid                = "STICKERSET_INVALID"
	ErrStickersetOwnerAnonymous         = "STICKERSET_OWNER_ANONYMOUS"
	ErrStickersEmpty                    = "STICKERS_EMPTY"
	ErrStickersTooMuch                  = "STICKERS_TOO_MUCH"
	ErrStickerDocumentInvalid           = "STICKER_DOCUMENT_INVALID"
	ErrStickerEmojiInvalid              = "STICKER_EMOJI_INVALID"
	ErrStickerFileInvalid               = "STICKER_FILE_INVALID"
	ErrStickerGifDimensions             = "STICKER_GIF_DIMENSIONS"
	ErrStickerIDInvalid                 = "STICKER_ID_INVALID"
	ErrStickerInvalid                   = "STICKER_INVALID"
	ErrStickerMimeInvalid               = "STICKER_MIME_INVALID"
	ErrStickerPngDimensions             = "STICKER_PNG_DIMENSIONS"
	ErrStickerPngNopng                  = "STICKER_PNG_NOPNG"
	ErrStickerTgsNodoc                  = "STICKER_TGS_NODOC"
	ErrStickerTgsNotgs                  = "STICKER_TGS_NOTGS"
	ErrStickerThumbPngNopng             = "STICKER_THUMB_PNG_NOPNG"
	ErrStickerThumbTgsNotgs             = "STICKER_THUMB_TGS_NOTGS"
	ErrStickerVideoBig                  = "STICKER_VIDEO_BIG"
	ErrStickerVideoNodoc                = "STICKER_VIDEO_NODOC"
	ErrStickerVideoNowebm               = "STICKER_VIDEO_NOWEBM"
	ErrSwitchPmTextEmpty                = "SWITCH_PM_TEXT_EMPTY"
	ErrTakeoutInitDelay                 = "TAKEOUT_INIT_DELAY"
	ErrTakeoutRequired                  = "TAKEOUT_REQUIRED"
	ErrTaskAlreadyExists                = "TASK_ALREADY_EXISTS"
	ErrTempAuthKeyAlreadyBound          = "TEMP_AUTH_KEY_ALREADY_BOUND"
	ErrTempAuthKeyEmpty                 = "TEMP_AUTH_KEY_EMPTY"
	ErrThemeFileInvalid                 = "THEME_FILE_INVALID"
	ErrThemeFormatInvalid               = "THEME_FORMAT_INVALID"
	ErrThemeInvalid                     = "THEME_INVALID"
	ErrThemeMimeInvalid                 = "THEME_MIME_INVALID"
	ErrThemeTitleInvalid                = "THEME_TITLE_INVALID"
	ErrTitleInvalid                     = "TITLE_INVALID"
	ErrTmpPasswordDisabled              = "TMP_PASSWORD_DISABLED"
	ErrTokenEmpty                       = "TOKEN_EMPTY"
	ErrTokenInvalid                     = "TOKEN_INVALID"
	ErrTokenTypeInvalid                 = "TOKEN_TYPE_INVALID"
	ErrTopicsEmpty                      = "TOPICS_EMPTY"
	ErrTopicClosed                      = "TOPIC_CLOSED"
	ErrTopicDeleted                     = "TOPIC_DELETED"
	ErrTopicIDInvalid                   = "TOPIC_ID_INVALID"
	ErrTopicNotModified                 = "TOPIC_NOT_MODIFIED"
	ErrToLangInvalid                    = "TO_LANG_INVALID"
	ErrTranscriptionFailed              = "TRANSCRIPTION_FAILED"
	ErrTTLDaysInvalid                   = "TTL_DAYS_INVALID"
	ErrTTLMediaInvalid                  = "TTL_MEDIA_INVALID"
	ErrTTLPeriodInvalid                 = "TTL_PERIOD_INVALID"
	ErrTypesEmpty                       = "TYPES_EMPTY"
	ErrTimeout                          = "Timeout"
	ErrUntilDateInvalid                 = "UNTIL_DATE_INVALID"
	ErrURLInvalid                       = "URL_INVALID"
	ErrUsageLimitInvalid                = "USAGE_LIMIT_INVALID"
	ErrUsernamesActiveTooMuch           = "USERNAMES_ACTIVE_TOO_MUCH"
	ErrUsernameInvalid                  = "USERNAME_INVALID"
	ErrUsernameNotModified              = "USERNAME_NOT_MODIFIED"
	ErrUsernameNotOccupied              = "USERNAME_NOT_OCCUPIED"
	ErrUsernameOccupied                 = "USERNAME_OCCUPIED"
	ErrUsernamePurchaseAvailable        = "USERNAME_PURCHASE_AVAILABLE"
	ErrUsernameUnsynchronized           = "USERNAME_UNSYNCHRONIZED"
	ErrUserpicPrivacyRequired           = "USERPIC_PRIVACY_REQUIRED"
	ErrUserpicUploadRequired            = "USERPIC_UPLOAD_REQUIRED"
	ErrUsersTooFew                      = "USERS_TOO_FEW"
	ErrUsersTooMuch                     = "USERS_TOO_MUCH"
	ErrUserAdminInvalid                 = "USER_ADMIN_INVALID"
	ErrUserAlreadyInvited               = "USER_ALREADY_INVITED"
	ErrUserAlreadyParticipant           = "USER_ALREADY_PARTICIPANT"
	ErrUserBannedInChannel              = "USER_BANNED_IN_CHANNEL"
	ErrUserBlocked                      = "USER_BLOCKED"
	ErrUserBot                          = "USER_BOT"
	ErrUserBotInvalid                   = "USER_BOT_INVALID"
	ErrUserBotRequired                  = "USER_BOT_REQUIRED"
	ErrUserChannelsTooMuch              = "USER_CHANNELS_TOO_MUCH"
	ErrUserCreator                      = "USER_CREATOR"
	ErrUserDeleted                      = "USER_DELETED"
	ErrUserIDInvalid                    = "USER_ID_INVALID"
	ErrUserInvalid                      = "USER_INVALID"
	ErrUserIsBlocked                    = "USER_IS_BLOCKED"
	ErrUserIsBot                        = "USER_IS_BOT"
	ErrUserKicked                       = "USER_KICKED"
	ErrUserNotMutualContact             = "USER_NOT_MUTUAL_CONTACT"
	ErrUserNotParticipant               = "USER_NOT_PARTICIPANT"
	ErrUserPrivacyRestricted            = "USER_PRIVACY_RESTRICTED"
	ErrUserRestricted                   = "USER_RESTRICTED"
	ErrUserVolumeInvalid                = "USER_VOLUME_INVALID"
	ErrVideoContentTypeInvalid          = "VIDEO_CONTENT_TYPE_INVALID"
	ErrVideoFileInvalid                 = "VIDEO_FILE_INVALID"
	ErrVideoTitleEmpty                  = "VIDEO_TITLE_EMPTY"
	ErrVoiceMessagesForbidden           = "VOICE_MESSAGES_FORBIDDEN"
	ErrWallpaperFileInvalid             = "WALLPAPER_FILE_INVALID"
	ErrWallpaperInvalid                 = "WALLPAPER_INVALID"
	ErrWallpaperMimeInvalid             = "WALLPAPER_MIME_INVALID"
	ErrWcConvertURLInvalid              = "WC_CONVERT_URL_INVALID"
	ErrWebdocumentInvalid               = "WEBDOCUMENT_INVALID"
	ErrWebdocumentMimeInvalid           = "WEBDOCUMENT_MIME_INVALID"
	ErrWebdocumentSizeTooBig            = "WEBDOCUMENT_SIZE_TOO_BIG"
	ErrWebdocumentURLInvalid            = "WEBDOCUMENT_URL_INVALID"
	ErrWebpageCurlFailed                = "WEBPAGE_CURL_FAILED"
	ErrWebpageMediaEmpty                = "WEBPAGE_MEDIA_EMPTY"
	ErrWebpushAuthInvalid               = "WEBPUSH_AUTH_INVALID"
	ErrWebpushKeyInvalid                = "WEBPUSH_KEY_INVALID"
	ErrWebpushTokenInvalid              = "WEBPUSH_TOKEN_INVALID"
	ErrYouBlockedUser                   = "YOU_BLOCKED_USER"
)

// Is2FAConfirmWait reports whether err is 2FA_CONFIRM_WAIT.
func Is2FAConfirmWait(err error) bool {
	return tgerr.Is(err, Err2FAConfirmWait)
}

// IsAboutTooLong reports whether err is ABOUT_TOO_LONG.
func IsAboutTooLong(err error) bool {
	return tgerr.Is(err, ErrAboutTooLong)
}

// IsAccessTokenExpired reports whether err is ACCESS_TOKEN_EXPIRED.
func IsAccessTokenExpired(err error) bool {
	return tgerr.Is(err, ErrAccessTokenExpired)
}

// IsAccessTokenInvalid reports whether err is ACCESS_TOKEN_INVALID.
func IsAccessTokenInvalid(err error) bool {
	return tgerr.Is(err, ErrAccessTokenInvalid)
}

// IsAdminsTooMuch reports whether err is ADMINS_TOO_MUCH.
func IsAdminsTooMuch(err error) bool {
	return tgerr.Is(err, ErrAdminsTooMuch)
}

// IsAdminIDInvalid reports whether err is ADMIN_ID_INVALID.
func IsAdminIDInvalid(err error) bool {
	return tgerr.Is(err, ErrAdminIDInvalid)
}

// IsAdminRankEmojiNotAllowed reports whether err is ADMIN_RANK_EMOJI_NOT_ALLOWED.
func IsAdminRankEmojiNotAllowed(err error) bool {
	return tgerr.Is(err, ErrAdminRankEmojiNotAllowed)
}

// IsAdminRankInvalid reports whether err is ADMIN_RANK_INVALID.
func IsAdminRankInvalid(err error) bool {
	return tgerr.Is(err, ErrAdminRankInvalid)
}

// IsAlbumPhotosTooMany reports whether err is ALBUM_PHOTOS_TOO_MANY.
func IsAlbumPhotosTooMany(err error) bool {
	return tgerr.Is(err, ErrAlbumPhotosTooMany)
}

// IsAPIIDInvalid reports whether err is API_ID_INVALID.
func IsAPIIDInvalid(err error) bool {
	return tgerr.Is(err, ErrAPIIDInvalid)
}

// IsAPIIDPublishedFlood reports whether err is API_ID_PUBLISHED_FLOOD.
func IsAPIIDPublishedFlood(err error) bool {
	return tgerr.Is(err, ErrAPIIDPublishedFlood)
}

// IsArticleTitleEmpty reports whether err is ARTICLE_TITLE_EMPTY.
func IsArticleTitleEmpty(err error) bool {
	return tgerr.Is(err, ErrArticleTitleEmpty)
}

// IsAudioContentURLEmpty reports whether err is AUDIO_CONTENT_URL_EMPTY.
func IsAudioContentURLEmpty(err error) bool {
	return tgerr.Is(err, ErrAudioContentURLEmpty)
}

// IsAudioTitleEmpty reports whether err is AUDIO_TITLE_EMPTY.
func IsAudioTitleEmpty(err error) bool {
	return tgerr.Is(err, ErrAudioTitleEmpty)
}

// IsAuthBytesInvalid reports whether err is AUTH_BYTES_INVALID.
func IsAuthBytesInvalid(err error) bool {
	return tgerr.Is(err, ErrAuthBytesInvalid)
}

// IsAuthRestart reports whether err is AUTH_RESTART.
func IsAuthRestart(err error) bool {
	return tgerr.Is(err, ErrAuthRestart)
}

// IsAuthTokenAlreadyAccepted reports whether err is AUTH_TOKEN_ALREADY_ACCEPTED.
func IsAuthTokenAlreadyAccepted(err error) bool {
	return tgerr.Is(err, ErrAuthTokenAlreadyAccepted)
}

// IsAuthTokenException reports whether err is AUTH_TOKEN_EXCEPTION.
func IsAuthTokenException(err error) bool {
	return tgerr.Is(err, ErrAuthTokenException)
}

// IsAuthTokenExpired reports whether err is AUTH_TOKEN_EXPIRED.
func IsAuthTokenExpired(err error) bool {
	return tgerr.Is(err, ErrAuthTokenExpired)
}

// IsAuthTokenInvalid reports whether err is AUTH_TOKEN_INVALID.
func IsAuthTokenInvalid(err error) bool {
	return tgerr.Is(err, ErrAuthTokenInvalid)
}

// IsAuthTokenInvalidx reports whether err is AUTH_TOKEN_INVALIDX.
func IsAuthTokenInvalidx(err error) bool {
	return tgerr.Is(err, ErrAuthTokenInvalidx)
}

// IsAutoarchiveNotAvailable reports whether err is AUTOARCHIVE_NOT_AVAILABLE.
func IsAutoarchiveNotAvailable(err error) bool {
	return tgerr.Is(err, ErrAutoarchiveNotAvailable)
}

// IsBankCardNumberInvalid reports whether err is BANK_CARD_NUMBER_INVALID.
func IsBankCardNumberInvalid(err error) bool {
	return tgerr.Is(err, ErrBankCardNumberInvalid)
}

// IsBannedRightsInvalid reports whether err is BANNED_RIGHTS_INVALID.
func IsBannedRightsInvalid(err error) bool {
	return tgerr.Is(err, ErrBannedRightsInvalid)
}

// IsBotsTooMuch reports whether err is BOTS_TOO_MUCH.
func IsBotsTooMuch(err error) bool {
	return tgerr.Is(err, ErrBotsTooMuch)
}

// IsBotAppInvalid reports whether err is BOT_APP_INVALID.
func IsBotAppInvalid(err error) bool {
	return tgerr.Is(err, ErrBotAppInvalid)
}

// IsBotChannelsNa reports whether err is BOT_CHANNELS_NA.
func IsBotChannelsNa(err error) bool {
	return tgerr.Is(err, ErrBotChannelsNa)
}

// IsBotCommandDescriptionInvalid reports whether err is BOT_COMMAND_DESCRIPTION_INVALID.
func IsBotCommandDescriptionInvalid(err error) bool {
	return tgerr.Is(err, ErrBotCommandDescriptionInvalid)
}

// IsBotCommandInvalid reports whether err is BOT_COMMAND_INVALID.
func IsBotCommandInvalid(err error) bool {
	return tgerr.Is(err, ErrBotCommandInvalid)
}

// IsBotDomainInvalid reports whether err is BOT_DOMAIN_INVALID.
func IsBotDomainInvalid(err error) bool {
	return tgerr.Is(err, ErrBotDomainInvalid)
}

// IsBotGroupsBlocked reports whether err is BOT_GROUPS_BLOCKED.
func IsBotGroupsBlocked(err error) bool {
	return tgerr.Is(err, ErrBotGroupsBlocked)
}

// IsBotInlineDisabled reports whether err is BOT_INLINE_DISABLED.
func IsBotInlineDisabled(err error) bool {
	return tgerr.Is(err, ErrBotInlineDisabled)
}

// IsBotInvalid reports whether err is BOT_INVALID.
func IsBotInvalid(err error) bool {
	return tgerr.Is(err, ErrBotInvalid)
}

// IsBotMissing reports whether err is BOT_MISSING.
func IsBotMissing(err error) bool {
	return tgerr.Is(err, ErrBotMissing)
}

// IsBotOnesideNotAvail reports whether err is BOT_ONESIDE_NOT_AVAIL.
func IsBotOnesideNotAvail(err error) bool {
	return tgerr.Is(err, ErrBotOnesideNotAvail)
}

// IsBotPaymentsDisabled reports whether err is BOT_PAYMENTS_DISABLED.
func IsBotPaymentsDisabled(err error) bool {
	return tgerr.Is(err, ErrBotPaymentsDisabled)
}

// IsBotResponseTimeout reports whether err is BOT_RESPONSE_TIMEOUT.
func IsBotResponseTimeout(err error) bool {
	return tgerr.Is(err, ErrBotResponseTimeout)
}

// IsBotScoreNotModified reports whether err is BOT_SCORE_NOT_MODIFIED.
func IsBotScoreNotModified(err error) bool {
	return tgerr.Is(err, ErrBotScoreNotModified)
}

// IsBroadcastForbidden reports whether err is BROADCAST_FORBIDDEN.
func IsBroadcastForbidden(err error) bool {
	return tgerr.Is(err, ErrBroadcastForbidden)
}

// IsBroadcastIDInvalid reports whether err is BROADCAST_ID_INVALID.
func IsBroadcastIDInvalid(err error) bool {
	return tgerr.Is(err, ErrBroadcastIDInvalid)
}

// IsBroadcastPublicVotersForbidden reports whether err is BROADCAST_PUBLIC_VOTERS_FORBIDDEN.
func IsBroadcastPublicVotersForbidden(err error) bool {
	return tgerr.Is(err, ErrBroadcastPublicVotersForbidden)
}

// IsBroadcastRequired reports whether err is BROADCAST_REQUIRED.
func IsBroadcastRequired(err error) bool {
	return tgerr.Is(err, ErrBroadcastRequired)
}

// IsButtonDataInvalid reports whether err is BUTTON_DATA_INVALID.
func IsButtonDataInvalid(err error) bool {
	return tgerr.Is(err, ErrButtonDataInvalid)
}

// IsButtonTextInvalid reports whether err is BUTTON_TEXT_INVALID.
func IsButtonTextInvalid(err error) bool {
	return tgerr.Is(err, ErrButtonTextInvalid)
}

// IsButtonTypeInvalid reports whether err is BUTTON_TYPE_INVALID.
func IsButtonTypeInvalid(err error) bool {
	return tgerr.Is(err, ErrButtonTypeInvalid)
}

// IsButtonURLInvalid reports whether err is BUTTON_URL_INVALID.
func IsButtonURLInvalid(err error) bool {
	return tgerr.Is(err, ErrButtonURLInvalid)
}

// IsButtonUserPrivacyRestricted reports whether err is BUTTON_USER_PRIVACY_RESTRICTED.
func IsButtonUserPrivacyRestricted(err error) bool {
	return tgerr.Is(err, ErrButtonUserPrivacyRestricted)
}

// IsCallAlreadyAccepted reports whether err is CALL_ALREADY_ACCEPTED.
func IsCallAlreadyAccepted(err error) bool {
	return tgerr.Is(err, ErrCallAlreadyAccepted)
}

// IsCallAlreadyDeclined reports whether err is CALL_ALREADY_DECLINED.
func IsCallAlreadyDeclined(err error) bool {
	return tgerr.Is(err, ErrCallAlreadyDeclined)
}

// IsCallOccupyFailed reports whether err is CALL_OCCUPY_FAILED.
func IsCallOccupyFailed(err error) bool {
	return tgerr.Is(err, ErrCallOccupyFailed)
}

// IsCallPeerInvalid reports whether err is CALL_PEER_INVALID.
func IsCallPeerInvalid(err error) bool {
	return tgerr.Is(err, ErrCallPeerInvalid)
}

// IsCallProtocolFlagsInvalid reports whether err is CALL_PROTOCOL_FLAGS_INVALID.
func IsCallProtocolFlagsInvalid(err error) bool {
	return tgerr.Is(err, ErrCallProtocolFlagsInvalid)
}

// IsCDNMethodInvalid reports whether err is CDN_METHOD_INVALID.
func IsCDNMethodInvalid(err error) bool {
	return tgerr.Is(err, ErrCDNMethodInvalid)
}

// IsCDNUploadTimeout reports whether err is CDN_UPLOAD_TIMEOUT.
func IsCDNUploadTimeout(err error) bool {
	return tgerr.Is(err, ErrCDNUploadTimeout)
}

// IsChannelsAdminLocatedTooMuch reports whether err is CHANNELS_ADMIN_LOCATED_TOO_MUCH.
func IsChannelsAdminLocatedTooMuch(err error) bool {
	return tgerr.Is(err, ErrChannelsAdminLocatedTooMuch)
}

// IsChannelsAdminPublicTooMuch reports whether err is CHANNELS_ADMIN_PUBLIC_TOO_MUCH.
func IsChannelsAdminPublicTooMuch(err error) bool {
	return tgerr.Is(err, ErrChannelsAdminPublicTooMuch)
}

// IsChannelsTooMuch reports whether err is CHANNELS_TOO_MUCH.
func IsChannelsTooMuch(err error) bool {
	return tgerr.Is(err, ErrChannelsTooMuch)
}

// IsChannelForumMissing reports whether err is CHANNEL_FORUM_MISSING.
func IsChannelForumMissing(err error) bool {
	return tgerr.Is(err, ErrChannelForumMissing)
}

// IsChannelIDGenerateFailed reports whether err is CHANNEL_ID_GENERATE_FAILED.
func IsChannelIDGenerateFailed(err error) bool {
	return tgerr.Is(err, ErrChannelIDGenerateFailed)
}

// IsChannelIDInvalid reports whether err is CHANNEL_ID_INVALID.
func IsChannelIDInvalid(err error) bool {
	return tgerr.Is(err, ErrChannelIDInvalid)
}

// IsChannelInvalid reports whether err is CHANNEL_INVALID.
func IsChannelInvalid(err error) bool {
	return tgerr.Is(err, ErrChannelInvalid)
}

// IsChannelParicipantMissing reports whether err is CHANNEL_PARICIPANT_MISSING.
func IsChannelParicipantMissing(err error) bool {
	return tgerr.Is(err, ErrChannelParicipantMissing)
}

// IsChannelPrivate reports whether err is CHANNEL_PRIVATE.
func IsChannelPrivate(err error) bool {
	return tgerr.Is(err, ErrChannelPrivate)
}

// IsChannelPublicGroupNa reports whether err is CHANNEL_PUBLIC_GROUP_NA.
func IsChannelPublicGroupNa(err error) bool {
	return tgerr.Is(err, ErrChannelPublicGroupNa)
}

// IsChannelTooBig reports whether err is CHANNEL_TOO_BIG.
func IsChannelTooBig(err error) bool {
	return tgerr.Is(err, ErrChannelTooBig)
}

// IsChannelTooLarge reports whether err is CHANNEL_TOO_LARGE.
func IsChannelTooLarge(err error) bool {
	return tgerr.Is(err, ErrChannelTooLarge)
}

// IsChatlistExcludeInvalid reports whether err is CHATLIST_EXCLUDE_INVALID.
func IsChatlistExcludeInvalid(err error) bool {
	return tgerr.Is(err, ErrChatlistExcludeInvalid)
}

// IsChatAboutNotModified reports whether err is CHAT_ABOUT_NOT_MODIFIED.
func IsChatAboutNotModified(err error) bool {
	return tgerr.Is(err, ErrChatAboutNotModified)
}

// IsChatAboutTooLong reports whether err is CHAT_ABOUT_TOO_LONG.
func IsChatAboutTooLong(err error) bool {
	return tgerr.Is(err, ErrChatAboutTooLong)
}

// IsChatAdminInviteRequired reports whether err is CHAT_ADMIN_INVITE_REQUIRED.
func IsChatAdminInviteRequired(err error) bool {
	return tgerr.Is(err, ErrChatAdminInviteRequired)
}

// IsChatAdminRequired reports whether err is CHAT_ADMIN_REQUIRED.
func IsChatAdminRequired(err error) bool {
	return tgerr.Is(err, ErrChatAdminRequired)
}

// IsChatDiscussionUnallowed reports whether err is CHAT_DISCUSSION_UNALLOWED.
func IsChatDiscussionUnallowed(err error) bool {
	return tgerr.Is(err, ErrChatDiscussionUnallowed)
}

// IsChatForwardsRestricted reports whether err is CHAT_FORWARDS_RESTRICTED.
func IsChatForwardsRestricted(err error) bool {
	return tgerr.Is(err, ErrChatForwardsRestricted)
}

// IsChatGuestSendForbidden reports whether err is CHAT_GUEST_SEND_FORBIDDEN.
func IsChatGuestSendForbidden(err error) bool {
	return tgerr.Is(err, ErrChatGuestSendForbidden)
}

// IsChatIDEmpty reports whether err is CHAT_ID_EMPTY.
func IsChatIDEmpty(err error) bool {
	return tgerr.Is(err, ErrChatIDEmpty)
}

// IsChatIDGenerateFailed reports whether err is CHAT_ID_GENERATE_FAILED.
func IsChatIDGenerateFailed(err error) bool {
	return tgerr.Is(err, ErrChatIDGenerateFailed)
}

// IsChatIDInvalid reports whether err is CHAT_ID_INVALID.
func IsChatIDInvalid(err error) bool {
	return tgerr.Is(err, ErrChatIDInvalid)
}

// IsChatInvalid reports whether err is CHAT_INVALID.
func IsChatInvalid(err error) bool {
	return tgerr.Is(err, ErrChatInvalid)
}

// IsChatInvitePermanent reports whether err is CHAT_INVITE_PERMANENT.
func IsChatInvitePermanent(err error) bool {
	return tgerr.Is(err, ErrChatInvitePermanent)
}

// IsChatLinkExists reports whether err is CHAT_LINK_EXISTS.
func IsChatLinkExists(err error) bool {
	return tgerr.Is(err, ErrChatLinkExists)
}

// IsChatMembersChannel reports whether err is CHAT_MEMBERS_CHANNEL.
func IsChatMembersChannel(err error) bool {
	return tgerr.Is(err, ErrChatMembersChannel)
}

// IsChatNotModified reports whether err is CHAT_NOT_MODIFIED.
func IsChatNotModified(err error) bool {
	return tgerr.Is(err, ErrChatNotModified)
}

// IsChatPublicRequired reports whether err is CHAT_PUBLIC_REQUIRED.
func IsChatPublicRequired(err error) bool {
	return tgerr.Is(err, ErrChatPublicRequired)
}

// IsChatRestricted reports whether err is CHAT_RESTRICTED.
func IsChatRestricted(err error) bool {
	return tgerr.Is(err, ErrChatRestricted)
}

// IsChatRevokeDateUnsupported reports whether err is CHAT_REVOKE_DATE_UNSUPPORTED.
func IsChatRevokeDateUnsupported(err error) bool {
	return tgerr.Is(err, ErrChatRevokeDateUnsupported)
}

// IsChatSendAudiosForbidden reports whether err is CHAT_SEND_AUDIOS_FORBIDDEN.
func IsChatSendAudiosForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendAudiosForbidden)
}

// IsChatSendDocsForbidden reports whether err is CHAT_SEND_DOCS_FORBIDDEN.
func IsChatSendDocsForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendDocsForbidden)
}

// IsChatSendGameForbidden reports whether err is CHAT_SEND_GAME_FORBIDDEN.
func IsChatSendGameForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendGameForbidden)
}

// IsChatSendGifsForbidden reports whether err is CHAT_SEND_GIFS_FORBIDDEN.
func IsChatSendGifsForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendGifsForbidden)
}

// IsChatSendInlineForbidden reports whether err is CHAT_SEND_INLINE_FORBIDDEN.
func IsChatSendInlineForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendInlineForbidden)
}

// IsChatSendMediaForbidden reports whether err is CHAT_SEND_MEDIA_FORBIDDEN.
func IsChatSendMediaForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendMediaForbidden)
}

// IsChatSendPhotosForbidden reports whether err is CHAT_SEND_PHOTOS_FORBIDDEN.
func IsChatSendPhotosForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendPhotosForbidden)
}

// IsChatSendPlainForbidden reports whether err is CHAT_SEND_PLAIN_FORBIDDEN.
func IsChatSendPlainForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendPlainForbidden)
}

// IsChatSendPollForbidden reports whether err is CHAT_SEND_POLL_FORBIDDEN.
func IsChatSendPollForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendPollForbidden)
}

// IsChatSendStickersForbidden reports whether err is CHAT_SEND_STICKERS_FORBIDDEN.
func IsChatSendStickersForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendStickersForbidden)
}

// IsChatSendVideosForbidden reports whether err is CHAT_SEND_VIDEOS_FORBIDDEN.
func IsChatSendVideosForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendVideosForbidden)
}

// IsChatSendVoicesForbidden reports whether err is CHAT_SEND_VOICES_FORBIDDEN.
func IsChatSendVoicesForbidden(err error) bool {
	return tgerr.Is(err, ErrChatSendVoicesForbidden)
}

// IsChatTitleEmpty reports whether err is CHAT_TITLE_EMPTY.
func IsChatTitleEmpty(err error) bool {
	return tgerr.Is(err, ErrChatTitleEmpty)
}

// IsChatTooBig reports whether err is CHAT_TOO_BIG.
func IsChatTooBig(err error) bool {
	return tgerr.Is(err, ErrChatTooBig)
}

// IsChatWriteForbidden reports whether err is CHAT_WRITE_FORBIDDEN.
func IsChatWriteForbidden(err error) bool {
	return tgerr.Is(err, ErrChatWriteForbidden)
}

// IsCodeEmpty reports whether err is CODE_EMPTY.
func IsCodeEmpty(err error) bool {
	return tgerr.Is(err, ErrCodeEmpty)
}

// IsCodeHashInvalid reports whether err is CODE_HASH_INVALID.
func IsCodeHashInvalid(err error) bool {
	return tgerr.Is(err, ErrCodeHashInvalid)
}

// IsCodeInvalid reports whether err is CODE_INVALID.
func IsCodeInvalid(err error) bool {
	return tgerr.Is(err, ErrCodeInvalid)
}

// IsConnectionAPIIDInvalid reports whether err is CONNECTION_API_ID_INVALID.
func IsConnectionAPIIDInvalid(err error) bool {
	return tgerr.Is(err, ErrConnectionAPIIDInvalid)
}

// IsConnectionAppVersionEmpty reports whether err is CONNECTION_APP_VERSION_EMPTY.
func IsConnectionAppVersionEmpty(err error) bool {
	return tgerr.Is(err, ErrConnectionAppVersionEmpty)
}

// IsConnectionLayerInvalid reports whether err is CONNECTION_LAYER_INVALID.
func IsConnectionLayerInvalid(err error) bool {
	return tgerr.Is(err, ErrConnectionLayerInvalid)
}

// IsContactAddMissing reports whether err is CONTACT_ADD_MISSING.
func IsContactAddMissing(err error) bool {
	return tgerr.Is(err, ErrContactAddMissing)
}

// IsContactIDInvalid reports whether err is CONTACT_ID_INVALID.
func IsContactIDInvalid(err error) bool {
	return tgerr.Is(err, ErrContactIDInvalid)
}

// IsContactNameEmpty reports whether err is CONTACT_NAME_EMPTY.
func IsContactNameEmpty(err error) bool {
	return tgerr.Is(err, ErrContactNameEmpty)
}

// IsContactReqMissing reports whether err is CONTACT_REQ_MISSING.
func IsContactReqMissing(err error) bool {
	return tgerr.Is(err, ErrContactReqMissing)
}

// IsCreateCallFailed reports whether err is CREATE_CALL_FAILED.
func IsCreateCallFailed(err error) bool {
	return tgerr.Is(err, ErrCreateCallFailed)
}

// IsCurrencyTotalAmountInvalid reports whether err is CURRENCY_TOTAL_AMOUNT_INVALID.
func IsCurrencyTotalAmountInvalid(err error) bool {
	return tgerr.Is(err, ErrCurrencyTotalAmountInvalid)
}

// IsDataInvalid reports whether err is DATA_INVALID.
func IsDataInvalid(err error) bool {
	return tgerr.Is(err, ErrDataInvalid)
}

// IsDataJSONInvalid reports whether err is DATA_JSON_INVALID.
func IsDataJSONInvalid(err error) bool {
	return tgerr.Is(err, ErrDataJSONInvalid)
}

// IsDataTooLong reports whether err is DATA_TOO_LONG.
func IsDataTooLong(err error) bool {
	return tgerr.Is(err, ErrDataTooLong)
}

// IsDateEmpty reports whether err is DATE_EMPTY.
func IsDateEmpty(err error) bool {
	return tgerr.Is(err, ErrDateEmpty)
}

// IsDCIDInvalid reports whether err is DC_ID_INVALID.
func IsDCIDInvalid(err error) bool {
	return tgerr.Is(err, ErrDCIDInvalid)
}

// IsDhGAInvalid reports whether err is DH_G_A_INVALID.
func IsDhGAInvalid(err error) bool {
	return tgerr.Is(err, ErrDhGAInvalid)
}

// IsDocumentInvalid reports whether err is DOCUMENT_INVALID.
func IsDocumentInvalid(err error) bool {
	return tgerr.Is(err, ErrDocumentInvalid)
}

// IsEditBotInviteForbidden reports whether err is EDIT_BOT_INVITE_FORBIDDEN.
func IsEditBotInviteForbidden(err error) bool {
	return tgerr.Is(err, ErrEditBotInviteForbidden)
}

// IsEmailHashExpired reports whether err is EMAIL_HASH_EXPIRED.
func IsEmailHashExpired(err error) bool {
	return tgerr.Is(err, ErrEmailHashExpired)
}

// IsEmailInvalid reports whether err is EMAIL_INVALID.
func IsEmailInvalid(err error) bool {
	return tgerr.Is(err, ErrEmailInvalid)
}

// IsEmailNotSetup reports whether err is EMAIL_NOT_SETUP.
func IsEmailNotSetup(err error) bool {
	return tgerr.Is(err, ErrEmailNotSetup)
}

// IsEmailUnconfirmed reports whether err is EMAIL_UNCONFIRMED.
func IsEmailUnconfirmed(err error) bool {
	return tgerr.Is(err, ErrEmailUnconfirmed)
}

// IsEmailVerifyExpired reports whether err is EMAIL_VERIFY_EXPIRED.
func IsEmailVerifyExpired(err error) bool {
	return tgerr.Is(err, ErrEmailVerifyExpired)
}

// IsEmojiInvalid reports whether err is EMOJI_INVALID.
func IsEmojiInvalid(err error) bool {
	return tgerr.Is(err, ErrEmojiInvalid)
}

// IsEmojiMarkupInvalid reports whether err is EMOJI_MARKUP_INVALID.
func IsEmojiMarkupInvalid(err error) bool {
	return tgerr.Is(err, ErrEmojiMarkupInvalid)
}

// IsEmojiNotModified reports whether err is EMOJI_NOT_MODIFIED.
func IsEmojiNotModified(err error) bool {
	return tgerr.Is(err, ErrEmojiNotModified)
}

// IsEmoticonEmpty reports whether err is EMOTICON_EMPTY.
func IsEmoticonEmpty(err error) bool {
	return tgerr.Is(err, ErrEmoticonEmpty)
}

// IsEmoticonInvalid reports whether err is EMOTICON_INVALID.
func IsEmoticonInvalid(err error) bool {
	return tgerr.Is(err, ErrEmoticonInvalid)
}

// IsEmoticonStickerpackMissing reports whether err is EMOTICON_STICKERPACK_MISSING.
func IsEmoticonStickerpackMissing(err error) bool {
	return tgerr.Is(err, ErrEmoticonStickerpackMissing)
}

// IsEncryptedMessageInvalid reports whether err is ENCRYPTED_MESSAGE_INVALID.
func IsEncryptedMessageInvalid(err error) bool {
	return tgerr.Is(err, ErrEncryptedMessageInvalid)
}

// IsEncryptionAlreadyAccepted reports whether err is ENCRYPTION_ALREADY_ACCEPTED.
func IsEncryptionAlreadyAccepted(err error) bool {
	return tgerr.Is(err, ErrEncryptionAlreadyAccepted)
}

// IsEncryptionAlreadyDeclined reports whether err is ENCRYPTION_ALREADY_DECLINED.
func IsEncryptionAlreadyDeclined(err error) bool {
	return tgerr.Is(err, ErrEncryptionAlreadyDeclined)
}

// IsEncryptionDeclined reports whether err is ENCRYPTION_DECLINED.
func IsEncryptionDeclined(err error) bool {
	return tgerr.Is(err, ErrEncryptionDeclined)
}

// IsEncryptionIDInvalid reports whether err is ENCRYPTION_ID_INVALID.
func IsEncryptionIDInvalid(err error) bool {
	return tgerr.Is(err, ErrEncryptionIDInvalid)
}

// IsEntitiesTooLong reports whether err is ENTITIES_TOO_LONG.
func IsEntitiesTooLong(err error) bool {
	return tgerr.Is(err, ErrEntitiesTooLong)
}

// IsEntityBoundsInvalid reports whether err is ENTITY_BOUNDS_INVALID.
func IsEntityBoundsInvalid(err error) bool {
	return tgerr.Is(err, ErrEntityBoundsInvalid)
}

// IsEntityMentionUserInvalid reports whether err is ENTITY_MENTION_USER_INVALID.
func IsEntityMentionUserInvalid(err error) bool {
	return tgerr.Is(err, ErrEntityMentionUserInvalid)
}

// IsErrorTextEmpty reports whether err is ERROR_TEXT_EMPTY.
func IsErrorTextEmpty(err error) bool {
	return tgerr.Is(err, ErrErrorTextEmpty)
}

// IsExpireDateInvalid reports whether err is EXPIRE_DATE_INVALID.
func IsExpireDateInvalid(err error) bool {
	return tgerr.Is(err, ErrExpireDateInvalid)
}

// IsExternalURLInvalid reports whether err is EXTERNAL_URL_INVALID.
func IsExternalURLInvalid(err error) bool {
	return tgerr.Is(err, ErrExternalURLInvalid)
}

// IsFilerefUpgradeNeeded reports whether err is FILEREF_UPGRADE_NEEDED.
func IsFilerefUpgradeNeeded(err error) bool {
	return tgerr.Is(err, ErrFilerefUpgradeNeeded)
}

// IsFileContentTypeInvalid reports whether err is FILE_CONTENT_TYPE_INVALID.
func IsFileContentTypeInvalid(err error) bool {
	return tgerr.Is(err, ErrFileContentTypeInvalid)
}

// IsFileEmtpy reports whether err is FILE_EMTPY.
func IsFileEmtpy(err error) bool {
	return tgerr.Is(err, ErrFileEmtpy)
}

// IsFileIDInvalid reports whether err is FILE_ID_INVALID.
func IsFileIDInvalid(err error) bool {
	return tgerr.Is(err, ErrFileIDInvalid)
}

// IsFilePartsInvalid reports whether err is FILE_PARTS_INVALID.
func IsFilePartsInvalid(err error) bool {
	return tgerr.Is(err, ErrFilePartsInvalid)
}

// IsFilePartEmpty reports whether err is FILE_PART_EMPTY.
func IsFilePartEmpty(err error) bool {
	return tgerr.Is(err, ErrFilePartEmpty)
}

// IsFilePartInvalid reports whether err is FILE_PART_INVALID.
func IsFilePartInvalid(err error) bool {
	return tgerr.Is(err, ErrFilePartInvalid)
}

// IsFilePartLengthInvalid reports whether err is FILE_PART_LENGTH_INVALID.
func IsFilePartLengthInvalid(err error) bool {
	return tgerr.Is(err, ErrFilePartLengthInvalid)
}

// IsFilePartSizeChanged reports whether err is FILE_PART_SIZE_CHANGED.
func IsFilePartSizeChanged(err error) bool {
	return tgerr.Is(err, ErrFilePartSizeChanged)
}

// IsFilePartSizeInvalid reports whether err is FILE_PART_SIZE_INVALID.
func IsFilePartSizeInvalid(err error) bool {
	return tgerr.Is(err, ErrFilePartSizeInvalid)
}

// IsFilePartTooBig reports whether err is FILE_PART_TOO_BIG.
func IsFilePartTooBig(err error) bool {
	return tgerr.Is(err, ErrFilePartTooBig)
}

// IsFileReference reports whether err is FILE_REFERENCE.
func IsFileReference(err error) bool {
	return tgerr.Is(err, ErrFileReference)
}

// IsFileReferenceEmpty reports whether err is FILE_REFERENCE_EMPTY.
func IsFileReferenceEmpty(err error) bool {
	return tgerr.Is(err, ErrFileReferenceEmpty)
}

// IsFileReferenceExpired reports whether err is FILE_REFERENCE_EXPIRED.
func IsFileReferenceExpired(err error) bool {
	return tgerr.Is(err, ErrFileReferenceExpired)
}

// IsFileReferenceInvalid reports whether err is FILE_REFERENCE_INVALID.
func IsFileReferenceInvalid(err error) bool {
	return tgerr.Is(err, ErrFileReferenceInvalid)
}

// IsFileTitleEmpty reports whether err is FILE_TITLE_EMPTY.
func IsFileTitleEmpty(err error) bool {
	return tgerr.Is(err, ErrFileTitleEmpty)
}

// IsFileTokenInvalid reports whether err is FILE_TOKEN_INVALID.
func IsFileTokenInvalid(err error) bool {
	return tgerr.Is(err, ErrFileTokenInvalid)
}

// IsFileWriteEmpty reports whether err is FILE_WRITE_EMPTY.
func IsFileWriteEmpty(err error) bool {
	return tgerr.Is(err, ErrFileWriteEmpty)
}

// IsFilterIDInvalid reports whether err is FILTER_ID_INVALID.
func IsFilterIDInvalid(err error) bool {
	return tgerr.Is(err, ErrFilterIDInvalid)
}

// IsFilterIncludeEmpty reports whether err is FILTER_INCLUDE_EMPTY.
func IsFilterIncludeEmpty(err error) bool {
	return tgerr.Is(err, ErrFilterIncludeEmpty)
}

// IsFilterNotSupported reports whether err is FILTER_NOT_SUPPORTED.
func IsFilterNotSupported(err error) bool {
	return tgerr.Is(err, ErrFilterNotSupported)
}

// IsFilterTitleEmpty reports whether err is FILTER_TITLE_EMPTY.
func IsFilterTitleEmpty(err error) bool {
	return tgerr.Is(err, ErrFilterTitleEmpty)
}

// IsFirstnameInvalid reports whether err is FIRSTNAME_INVALID.
func IsFirstnameInvalid(err error) bool {
	return tgerr.Is(err, ErrFirstnameInvalid)
}

// IsFolderIDInvalid reports whether err is FOLDER_ID_INVALID.
func IsFolderIDInvalid(err error) bool {
	return tgerr.Is(err, ErrFolderIDInvalid)
}

// IsFreshChangeAdminsForbidden reports whether err is FRESH_CHANGE_ADMINS_FORBIDDEN.
func IsFreshChangeAdminsForbidden(err error) bool {
	return tgerr.Is(err, ErrFreshChangeAdminsForbidden)
}

// IsFreshChangePhoneForbidden reports whether err is FRESH_CHANGE_PHONE_FORBIDDEN.
func IsFreshChangePhoneForbidden(err error) bool {
	return tgerr.Is(err, ErrFreshChangePhoneForbidden)
}

// IsFreshResetAuthorisationForbidden reports whether err is FRESH_RESET_AUTHORISATION_FORBIDDEN.
func IsFreshResetAuthorisationForbidden(err error) bool {
	return tgerr.Is(err, ErrFreshResetAuthorisationForbidden)
}

// IsFromMessageBotDisabled reports whether err is FROM_MESSAGE_BOT_DISABLED.
func IsFromMessageBotDisabled(err error) bool {
	return tgerr.Is(err, ErrFromMessageBotDisabled)
}

// IsFromPeerInvalid reports whether err is FROM_PEER_INVALID.
func IsFromPeerInvalid(err error) bool {
	return tgerr.Is(err, ErrFromPeerInvalid)
}

// IsGameBotInvalid reports whether err is GAME_BOT_INVALID.
func IsGameBotInvalid(err error) bool {
	return tgerr.Is(err, ErrGameBotInvalid)
}

// IsGeoPointInvalid reports whether err is GEO_POINT_INVALID.
func IsGeoPointInvalid(err error) bool {
	return tgerr.Is(err, ErrGeoPointInvalid)
}

// IsGifContentTypeInvalid reports whether err is GIF_CONTENT_TYPE_INVALID.
func IsGifContentTypeInvalid(err error) bool {
	return tgerr.Is(err, ErrGifContentTypeInvalid)
}

// IsGifIDInvalid reports whether err is GIF_ID_INVALID.
func IsGifIDInvalid(err error) bool {
	return tgerr.Is(err, ErrGifIDInvalid)
}

// IsGraphExpiredReload reports whether err is GRAPH_EXPIRED_RELOAD.
func IsGraphExpiredReload(err error) bool {
	return tgerr.Is(err, ErrGraphExpiredReload)
}

// IsGraphInvalidReload reports whether err is GRAPH_INVALID_RELOAD.
func IsGraphInvalidReload(err error) bool {
	return tgerr.Is(err, ErrGraphInvalidReload)
}

// IsGraphOutdatedReload reports whether err is GRAPH_OUTDATED_RELOAD.
func IsGraphOutdatedReload(err error) bool {
	return tgerr.Is(err, ErrGraphOutdatedReload)
}

// IsGroupcallAlreadyDiscarded reports whether err is GROUPCALL_ALREADY_DISCARDED.
func IsGroupcallAlreadyDiscarded(err error) bool {
	return tgerr.Is(err, ErrGroupcallAlreadyDiscarded)
}

// IsGroupcallAlreadyStarted reports whether err is GROUPCALL_ALREADY_STARTED.
func IsGroupcallAlreadyStarted(err error) bool {
	return tgerr.Is(err, ErrGroupcallAlreadyStarted)
}

// IsGroupcallForbidden reports whether err is GROUPCALL_FORBIDDEN.
func IsGroupcallForbidden(err error) bool {
	return tgerr.Is(err, ErrGroupcallForbidden)
}

// IsGroupcallInvalid reports whether err is GROUPCALL_INVALID.
func IsGroupcallInvalid(err error) bool {
	return tgerr.Is(err, ErrGroupcallInvalid)
}

// IsGroupcallJoinMissing reports whether err is GROUPCALL_JOIN_MISSING.
func IsGroupcallJoinMissing(err error) bool {
	return tgerr.Is(err, ErrGroupcallJoinMissing)
}

// IsGroupcallNotModified reports whether err is GROUPCALL_NOT_MODIFIED.
func IsGroupcallNotModified(err error) bool {
	return tgerr.Is(err, ErrGroupcallNotModified)
}

// IsGroupcallSsrcDuplicateMuch reports whether err is GROUPCALL_SSRC_DUPLICATE_MUCH.
func IsGroupcallSsrcDuplicateMuch(err error) bool {
	return tgerr.Is(err, ErrGroupcallSsrcDuplicateMuch)
}

// IsGroupedMediaInvalid reports whether err is GROUPED_MEDIA_INVALID.
func IsGroupedMediaInvalid(err error) bool {
	return tgerr.Is(err, ErrGroupedMediaInvalid)
}

// IsHashInvalid reports whether err is HASH_INVALID.
func IsHashInvalid(err error) bool {
	return tgerr.Is(err, ErrHashInvalid)
}

// IsHideRequesterMissing reports whether err is HIDE_REQUESTER_MISSING.
func IsHideRequesterMissing(err error) bool {
	return tgerr.Is(err, ErrHideRequesterMissing)
}

// IsImageProcessFailed reports whether err is IMAGE_PROCESS_FAILED.
func IsImageProcessFailed(err error) bool {
	return tgerr.Is(err, ErrImageProcessFailed)
}

// IsImportFileInvalid reports whether err is IMPORT_FILE_INVALID.
func IsImportFileInvalid(err error) bool {
	return tgerr.Is(err, ErrImportFileInvalid)
}

// IsImportFormatUnrecognized reports whether err is IMPORT_FORMAT_UNRECOGNIZED.
func IsImportFormatUnrecognized(err error) bool {
	return tgerr.Is(err, ErrImportFormatUnrecognized)
}

// IsImportIDInvalid reports whether err is IMPORT_ID_INVALID.
func IsImportIDInvalid(err error) bool {
	return tgerr.Is(err, ErrImportIDInvalid)
}

// IsImportTokenInvalid reports whether err is IMPORT_TOKEN_INVALID.
func IsImportTokenInvalid(err error) bool {
	return tgerr.Is(err, ErrImportTokenInvalid)
}

// IsInlineBotRequired reports whether err is INLINE_BOT_REQUIRED.
func IsInlineBotRequired(err error) bool {
	return tgerr.Is(err, ErrInlineBotRequired)
}

// IsInlineResultExpired reports whether err is INLINE_RESULT_EXPIRED.
func IsInlineResultExpired(err error) bool {
	return tgerr.Is(err, ErrInlineResultExpired)
}

// IsInputChatlistInvalid reports whether err is INPUT_CHATLIST_INVALID.
func IsInputChatlistInvalid(err error) bool {
	return tgerr.Is(err, ErrInputChatlistInvalid)
}

// IsInputFilterInvalid reports whether err is INPUT_FILTER_INVALID.
func IsInputFilterInvalid(err error) bool {
	return tgerr.Is(err, ErrInputFilterInvalid)
}

// IsInputTextEmpty reports whether err is INPUT_TEXT_EMPTY.
func IsInputTextEmpty(err error) bool {
	return tgerr.Is(err, ErrInputTextEmpty)
}

// IsInputUserDeactivated reports whether err is INPUT_USER_DEACTIVATED.
func IsInputUserDeactivated(err error) bool {
	return tgerr.Is(err, ErrInputUserDeactivated)
}

// IsInvitesTooMuch reports whether err is INVITES_TOO_MUCH.
func IsInvitesTooMuch(err error) bool {
	return tgerr.Is(err, ErrInvitesTooMuch)
}

// IsInviteForbiddenWithJoinas reports whether err is INVITE_FORBIDDEN_WITH_JOINAS.
func IsInviteForbiddenWithJoinas(err error) bool {
	return tgerr.Is(err, ErrInviteForbiddenWithJoinas)
}

// IsInviteHashEmpty reports whether err is INVITE_HASH_EMPTY.
func IsInviteHashEmpty(err error) bool {
	return tgerr.Is(err, ErrInviteHashEmpty)
}

// IsInviteHashExpired reports whether err is INVITE_HASH_EXPIRED.
func IsInviteHashExpired(err error) bool {
	return tgerr.Is(err, ErrInviteHashExpired)
}

// IsInviteHashInvalid reports whether err is INVITE_HASH_INVALID.
func IsInviteHashInvalid(err error) bool {
	return tgerr.Is(err, ErrInviteHashInvalid)
}

// IsInviteRequestSent reports whether err is INVITE_REQUEST_SENT.
func IsInviteRequestSent(err error) bool {
	return tgerr.Is(err, ErrInviteRequestSent)
}

// IsInviteRevokedMissing reports whether err is INVITE_REVOKED_MISSING.
func IsInviteRevokedMissing(err error) bool {
	return tgerr.Is(err, ErrInviteRevokedMissing)
}

// IsInviteSlugEmpty reports whether err is INVITE_SLUG_EMPTY.
func IsInviteSlugEmpty(err error) bool {
	return tgerr.Is(err, ErrInviteSlugEmpty)
}

// IsInvoicePayloadInvalid reports whether err is INVOICE_PAYLOAD_INVALID.
func IsInvoicePayloadInvalid(err error) bool {
	return tgerr.Is(err, ErrInvoicePayloadInvalid)
}

// IsJoinAsPeerInvalid reports whether err is JOIN_AS_PEER_INVALID.
func IsJoinAsPeerInvalid(err error) bool {
	return tgerr.Is(err, ErrJoinAsPeerInvalid)
}

// IsLangCodeInvalid reports whether err is LANG_CODE_INVALID.
func IsLangCodeInvalid(err error) bool {
	return tgerr.Is(err, ErrLangCodeInvalid)
}

// IsLangCodeNotSupported reports whether err is LANG_CODE_NOT_SUPPORTED.
func IsLangCodeNotSupported(err error) bool {
	return tgerr.Is(err, ErrLangCodeNotSupported)
}

// IsLangPackInvalid reports whether err is LANG_PACK_INVALID.
func IsLangPackInvalid(err error) bool {
	return tgerr.Is(err, ErrLangPackInvalid)
}

// IsLastnameInvalid reports whether err is LASTNAME_INVALID.
func IsLastnameInvalid(err error) bool {
	return tgerr.Is(err, ErrLastnameInvalid)
}

// IsLimitInvalid reports whether err is LIMIT_INVALID.
func IsLimitInvalid(err error) bool {
	return tgerr.Is(err, ErrLimitInvalid)
}

// IsLinkNotModified reports whether err is LINK_NOT_MODIFIED.
func IsLinkNotModified(err error) bool {
	return tgerr.Is(err, ErrLinkNotModified)
}

// IsLocationInvalid reports whether err is LOCATION_INVALID.
func IsLocationInvalid(err error) bool {
	return tgerr.Is(err, ErrLocationInvalid)
}

// IsMaxDateInvalid reports whether err is MAX_DATE_INVALID.
func IsMaxDateInvalid(err error) bool {
	return tgerr.Is(err, ErrMaxDateInvalid)
}

// IsMaxIDInvalid reports whether err is MAX_ID_INVALID.
func IsMaxIDInvalid(err error) bool {
	return tgerr.Is(err, ErrMaxIDInvalid)
}

// IsMaxQtsInvalid reports whether err is MAX_QTS_INVALID.
func IsMaxQtsInvalid(err error) bool {
	return tgerr.Is(err, ErrMaxQtsInvalid)
}

// IsMD5ChecksumInvalid reports whether err is MD5_CHECKSUM_INVALID.
func IsMD5ChecksumInvalid(err error) bool {
	return tgerr.Is(err, ErrMD5ChecksumInvalid)
}

// IsMediaCaptionTooLong reports whether err is MEDIA_CAPTION_TOO_LONG.
func IsMediaCaptionTooLong(err error) bool {
	return tgerr.Is(err, ErrMediaCaptionTooLong)
}

// IsMediaEmpty reports whether err is MEDIA_EMPTY.
func IsMediaEmpty(err error) bool {
	return tgerr.Is(err, ErrMediaEmpty)
}

// IsMediaGroupedInvalid reports whether err is MEDIA_GROUPED_INVALID.
func IsMediaGroupedInvalid(err error) bool {
	return tgerr.Is(err, ErrMediaGroupedInvalid)
}

// IsMediaInvalid reports whether err is MEDIA_INVALID.
func IsMediaInvalid(err error) bool {
	return tgerr.Is(err, ErrMediaInvalid)
}

// IsMediaNewInvalid reports whether err is MEDIA_NEW_INVALID.
func IsMediaNewInvalid(err error) bool {
	return tgerr.Is(err, ErrMediaNewInvalid)
}

// IsMediaPrevInvalid reports whether err is MEDIA_PREV_INVALID.
func IsMediaPrevInvalid(err error) bool {
	return tgerr.Is(err, ErrMediaPrevInvalid)
}

// IsMediaTTLInvalid reports whether err is MEDIA_TTL_INVALID.
func IsMediaTTLInvalid(err error) bool {
	return tgerr.Is(err, ErrMediaTTLInvalid)
}

// IsMegagroupIDInvalid reports whether err is MEGAGROUP_ID_INVALID.
func IsMegagroupIDInvalid(err error) bool {
	return tgerr.Is(err, ErrMegagroupIDInvalid)
}

// IsMegagroupPrehistoryHidden reports whether err is MEGAGROUP_PREHISTORY_HIDDEN.
func IsMegagroupPrehistoryHidden(err error) bool {
	return tgerr.Is(err, ErrMegagroupPrehistoryHidden)
}

// IsMegagroupRequired reports whether err is MEGAGROUP_REQUIRED.
func IsMegagroupRequired(err error) bool {
	return tgerr.Is(err, ErrMegagroupRequired)
}

// IsMemberChatAddFailed reports whether err is MEMBER_CHAT_ADD_FAILED.
func IsMemberChatAddFailed(err error) bool {
	return tgerr.Is(err, ErrMemberChatAddFailed)
}

// IsMessageAuthorRequired reports whether err is MESSAGE_AUTHOR_REQUIRED.
func IsMessageAuthorRequired(err error) bool {
	return tgerr.Is(err, ErrMessageAuthorRequired)
}

// IsMessageDeleteForbidden reports whether err is MESSAGE_DELETE_FORBIDDEN.
func IsMessageDeleteForbidden(err error) bool {
	return tgerr.Is(err, ErrMessageDeleteForbidden)
}

// IsMessageEditTimeExpired reports whether err is MESSAGE_EDIT_TIME_EXPIRED.
func IsMessageEditTimeExpired(err error) bool {
	return tgerr.Is(err, ErrMessageEditTimeExpired)
}

// IsMessageEmpty reports whether err is MESSAGE_EMPTY.
func IsMessageEmpty(err error) bool {
	return tgerr.Is(err, ErrMessageEmpty)
}

// IsMessageIDsEmpty reports whether err is MESSAGE_IDS_EMPTY.
func IsMessageIDsEmpty(err error) bool {
	return tgerr.Is(err, ErrMessageIDsEmpty)
}

// IsMessageIDInvalid reports whether err is MESSAGE_ID_INVALID.
func IsMessageIDInvalid(err error) bool {
	return tgerr.Is(err, ErrMessageIDInvalid)
}

// IsMessageNotModified reports whether err is MESSAGE_NOT_MODIFIED.
func IsMessageNotModified(err error) bool {
	return tgerr.Is(err, ErrMessageNotModified)
}

// IsMessagePollClosed reports whether err is MESSAGE_POLL_CLOSED.
func IsMessagePollClosed(err error) bool {
	return tgerr.Is(err, ErrMessagePollClosed)
}

// IsMessageTooLong reports whether err is MESSAGE_TOO_LONG.
func IsMessageTooLong(err error) bool {
	return tgerr.Is(err, ErrMessageTooLong)
}

// IsMethodInvalid reports whether err is METHOD_INVALID.
func IsMethodInvalid(err error) bool {
	return tgerr.Is(err, ErrMethodInvalid)
}

// IsMinDateInvalid reports whether err is MIN_DATE_INVALID.
func IsMinDateInvalid(err error) bool {
	return tgerr.Is(err, ErrMinDateInvalid)
}

// IsMsgIDInvalid reports whether err is MSG_ID_INVALID.
func IsMsgIDInvalid(err error) bool {
	return tgerr.Is(err, ErrMsgIDInvalid)
}

// IsMsgTooOld reports whether err is MSG_TOO_OLD.
func IsMsgTooOld(err error) bool {
	return tgerr.Is(err, ErrMsgTooOld)
}

// IsMsgWaitFailed reports whether err is MSG_WAIT_FAILED.
func IsMsgWaitFailed(err error) bool {
	return tgerr.Is(err, ErrMsgWaitFailed)
}

// IsMultiMediaTooLong reports whether err is MULTI_MEDIA_TOO_LONG.
func IsMultiMediaTooLong(err error) bool {
	return tgerr.Is(err, ErrMultiMediaTooLong)
}

// IsNewSaltInvalid reports whether err is NEW_SALT_INVALID.
func IsNewSaltInvalid(err error) bool {
	return tgerr.Is(err, ErrNewSaltInvalid)
}

// IsNewSettingsEmpty reports whether err is NEW_SETTINGS_EMPTY.
func IsNewSettingsEmpty(err error) bool {
	return tgerr.Is(err, ErrNewSettingsEmpty)
}

// IsNewSettingsInvalid reports whether err is NEW_SETTINGS_INVALID.
func IsNewSettingsInvalid(err error) bool {
	return tgerr.Is(err, ErrNewSettingsInvalid)
}

// IsNextOffsetInvalid reports whether err is NEXT_OFFSET_INVALID.
func IsNextOffsetInvalid(err error) bool {
	return tgerr.Is(err, ErrNextOffsetInvalid)
}

// IsOffsetInvalid reports whether err is OFFSET_INVALID.
func IsOffsetInvalid(err error) bool {
	return tgerr.Is(err, ErrOffsetInvalid)
}

// IsOffsetPeerIDInvalid reports whether err is OFFSET_PEER_ID_INVALID.
func IsOffsetPeerIDInvalid(err error) bool {
	return tgerr.Is(err, ErrOffsetPeerIDInvalid)
}

// IsOptionsTooMuch reports whether err is OPTIONS_TOO_MUCH.
func IsOptionsTooMuch(err error) bool {
	return tgerr.Is(err, ErrOptionsTooMuch)
}

// IsOptionInvalid reports whether err is OPTION_INVALID.
func IsOptionInvalid(err error) bool {
	return tgerr.Is(err, ErrOptionInvalid)
}

// IsOrderInvalid reports whether err is ORDER_INVALID.
func IsOrderInvalid(err error) bool {
	return tgerr.Is(err, ErrOrderInvalid)
}

// IsPackShortNameInvalid reports whether err is PACK_SHORT_NAME_INVALID.
func IsPackShortNameInvalid(err error) bool {
	return tgerr.Is(err, ErrPackShortNameInvalid)
}

// IsPackShortNameOccupied reports whether err is PACK_SHORT_NAME_OCCUPIED.
func IsPackShortNameOccupied(err error) bool {
	return tgerr.Is(err, ErrPackShortNameOccupied)
}

// IsPackTitleInvalid reports whether err is PACK_TITLE_INVALID.
func IsPackTitleInvalid(err error) bool {
	return tgerr.Is(err, ErrPackTitleInvalid)
}

// IsParticipantsTooFew reports whether err is PARTICIPANTS_TOO_FEW.
func IsParticipantsTooFew(err error) bool {
	return tgerr.Is(err, ErrParticipantsTooFew)
}

// IsParticipantIDInvalid reports whether err is PARTICIPANT_ID_INVALID.
func IsParticipantIDInvalid(err error) bool {
	return tgerr.Is(err, ErrParticipantIDInvalid)
}

// IsParticipantJoinMissing reports whether err is PARTICIPANT_JOIN_MISSING.
func IsParticipantJoinMissing(err error) bool {
	return tgerr.Is(err, ErrParticipantJoinMissing)
}

// IsParticipantVersionOutdated reports whether err is PARTICIPANT_VERSION_OUTDATED.
func IsParticipantVersionOutdated(err error) bool {
	return tgerr.Is(err, ErrParticipantVersionOutdated)
}

// IsPasswordEmpty reports whether err is PASSWORD_EMPTY.
func IsPasswordEmpty(err error) bool {
	return tgerr.Is(err, ErrPasswordEmpty)
}

// IsPasswordHashInvalid reports whether err is PASSWORD_HASH_INVALID.
func IsPasswordHashInvalid(err error) bool {
	return tgerr.Is(err, ErrPasswordHashInvalid)
}

// IsPasswordMissing reports whether err is PASSWORD_MISSING.
func IsPasswordMissing(err error) bool {
	return tgerr.Is(err, ErrPasswordMissing)
}

// IsPasswordRecoveryExpired reports whether err is PASSWORD_RECOVERY_EXPIRED.
func IsPasswordRecoveryExpired(err error) bool {
	return tgerr.Is(err, ErrPasswordRecoveryExpired)
}

// IsPasswordRecoveryNa reports whether err is PASSWORD_RECOVERY_NA.
func IsPasswordRecoveryNa(err error) bool {
	return tgerr.Is(err, ErrPasswordRecoveryNa)
}

// IsPasswordRequired reports whether err is PASSWORD_REQUIRED.
func IsPasswordRequired(err error) bool {
	return tgerr.Is(err, ErrPasswordRequired)
}

// IsPasswordTooFresh reports whether err is PASSWORD_TOO_FRESH.
func IsPasswordTooFresh(err error) bool {
	return tgerr.Is(err, ErrPasswordTooFresh)
}

// IsPaymentProviderInvalid reports whether err is PAYMENT_PROVIDER_INVALID.
func IsPaymentProviderInvalid(err error) bool {
	return tgerr.Is(err, ErrPaymentProviderInvalid)
}

// IsPaymentUnsupported reports whether err is PAYMENT_UNSUPPORTED.
func IsPaymentUnsupported(err error) bool {
	return tgerr.Is(err, ErrPaymentUnsupported)
}

// IsPeersListEmpty reports whether err is PEERS_LIST_EMPTY.
func IsPeersListEmpty(err error) bool {
	return tgerr.Is(err, ErrPeersListEmpty)
}

// IsPeerHistoryEmpty reports whether err is PEER_HISTORY_EMPTY.
func IsPeerHistoryEmpty(err error) bool {
	return tgerr.Is(err, ErrPeerHistoryEmpty)
}

// IsPeerIDInvalid reports whether err is PEER_ID_INVALID.
func IsPeerIDInvalid(err error) bool {
	return tgerr.Is(err, ErrPeerIDInvalid)
}

// IsPeerIDNotSupported reports whether err is PEER_ID_NOT_SUPPORTED.
func IsPeerIDNotSupported(err error) bool {
	return tgerr.Is(err, ErrPeerIDNotSupported)
}

// IsPersistentTimestampEmpty reports whether err is PERSISTENT_TIMESTAMP_EMPTY.
func IsPersistentTimestampEmpty(err error) bool {
	return tgerr.Is(err, ErrPersistentTimestampEmpty)
}

// IsPersistentTimestampInvalid reports whether err is PERSISTENT_TIMESTAMP_INVALID.
func IsPersistentTimestampInvalid(err error) bool {
	return tgerr.Is(err, ErrPersistentTimestampInvalid)
}

// IsPersistentTimestampOutdated reports whether err is PERSISTENT_TIMESTAMP_OUTDATED.
func IsPersistentTimestampOutdated(err error) bool {
	return tgerr.Is(err, ErrPersistentTimestampOutdated)
}

// IsPhoneCodeEmpty reports whether err is PHONE_CODE_EMPTY.
func IsPhoneCodeEmpty(err error) bool {
	return tgerr.Is(err, ErrPhoneCodeEmpty)
}

// IsPhoneCodeExpired reports whether err is PHONE_CODE_EXPIRED.
func IsPhoneCodeExpired(err error) bool {
	return tgerr.Is(err, ErrPhoneCodeExpired)
}

// IsPhoneCodeHashEmpty reports whether err is PHONE_CODE_HASH_EMPTY.
func IsPhoneCodeHashEmpty(err error) bool {
	return tgerr.Is(err, ErrPhoneCodeHashEmpty)
}

// IsPhoneCodeInvalid reports whether err is PHONE_CODE_INVALID.
func IsPhoneCodeInvalid(err error) bool {
	return tgerr.Is(err, ErrPhoneCodeInvalid)
}

// IsPhoneHashExpired reports whether err is PHONE_HASH_EXPIRED.
func IsPhoneHashExpired(err error) bool {
	return tgerr.Is(err, ErrPhoneHashExpired)
}

// IsPhoneNotOccupied reports whether err is PHONE_NOT_OCCUPIED.
func IsPhoneNotOccupied(err error) bool {
	return tgerr.Is(err, ErrPhoneNotOccupied)
}

// IsPhoneNumberAppSignupForbidden reports whether err is PHONE_NUMBER_APP_SIGNUP_FORBIDDEN.
func IsPhoneNumberAppSignupForbidden(err error) bool {
	return tgerr.Is(err, ErrPhoneNumberAppSignupForbidden)
}

// IsPhoneNumberBanned reports whether err is PHONE_NUMBER_BANNED.
func IsPhoneNumberBanned(err error) bool {
	return tgerr.Is(err, ErrPhoneNumberBanned)
}

// IsPhoneNumberFlood reports whether err is PHONE_NUMBER_FLOOD.
func IsPhoneNumberFlood(err error) bool {
	return tgerr.Is(err, ErrPhoneNumberFlood)
}

// IsPhoneNumberInvalid reports whether err is PHONE_NUMBER_INVALID.
func IsPhoneNumberInvalid(err error) bool {
	return tgerr.Is(err, ErrPhoneNumberInvalid)
}

// IsPhoneNumberOccupied reports whether err is PHONE_NUMBER_OCCUPIED.
func IsPhoneNumberOccupied(err error) bool {
	return tgerr.Is(err, ErrPhoneNumberOccupied)
}

// IsPhoneNumberUnoccupied reports whether err is PHONE_NUMBER_UNOCCUPIED.
func IsPhoneNumberUnoccupied(err error) bool {
	return tgerr.Is(err, ErrPhoneNumberUnoccupied)
}

// IsPhonePasswordFlood reports whether err is PHONE_PASSWORD_FLOOD.
func IsPhonePasswordFlood(err error) bool {
	return tgerr.Is(err, ErrPhonePasswordFlood)
}

// IsPhonePasswordProtected reports whether err is PHONE_PASSWORD_PROTECTED.
func IsPhonePasswordProtected(err error) bool {
	return tgerr.Is(err, ErrPhonePasswordProtected)
}

// IsPhotoContentTypeInvalid reports whether err is PHOTO_CONTENT_TYPE_INVALID.
func IsPhotoContentTypeInvalid(err error) bool {
	return tgerr.Is(err, ErrPhotoContentTypeInvalid)
}

// IsPhotoContentURLEmpty reports whether err is PHOTO_CONTENT_URL_EMPTY.
func IsPhotoContentURLEmpty(err error) bool {
	return tgerr.Is(err, ErrPhotoContentURLEmpty)
}

// IsPhotoCropFileMissing reports whether err is PHOTO_CROP_FILE_MISSING.
func IsPhotoCropFileMissing(err error) bool {
	return tgerr.Is(err, ErrPhotoCropFileMissing)
}

// IsPhotoCropSizeSmall reports whether err is PHOTO_CROP_SIZE_SMALL.
func IsPhotoCropSizeSmall(err error) bool {
	return tgerr.Is(err, ErrPhotoCropSizeSmall)
}

// IsPhotoExtInvalid reports whether err is PHOTO_EXT_INVALID.
func IsPhotoExtInvalid(err error) bool {
	return tgerr.Is(err, ErrPhotoExtInvalid)
}

// IsPhotoFileMissing reports whether err is PHOTO_FILE_MISSING.
func IsPhotoFileMissing(err error) bool {
	return tgerr.Is(err, ErrPhotoFileMissing)
}

// IsPhotoIDInvalid reports whether err is PHOTO_ID_INVALID.
func IsPhotoIDInvalid(err error) bool {
	return tgerr.Is(err, ErrPhotoIDInvalid)
}

// IsPhotoInvalid reports whether err is PHOTO_INVALID.
func IsPhotoInvalid(err error) bool {
	return tgerr.Is(err, ErrPhotoInvalid)
}

// IsPhotoInvalidDimensions reports whether err is PHOTO_INVALID_DIMENSIONS.
func IsPhotoInvalidDimensions(err error) bool {
	return tgerr.Is(err, ErrPhotoInvalidDimensions)
}

// IsPhotoSaveFileInvalid reports whether err is PHOTO_SAVE_FILE_INVALID.
func IsPhotoSaveFileInvalid(err error) bool {
	return tgerr.Is(err, ErrPhotoSaveFileInvalid)
}

// IsPhotoThumbURLEmpty reports whether err is PHOTO_THUMB_URL_EMPTY.
func IsPhotoThumbURLEmpty(err error) bool {
	return tgerr.Is(err, ErrPhotoThumbURLEmpty)
}

// IsPinnedDialogsTooMuch reports whether err is PINNED_DIALOGS_TOO_MUCH.
func IsPinnedDialogsTooMuch(err error) bool {
	return tgerr.Is(err, ErrPinnedDialogsTooMuch)
}

// IsPinRestricted reports whether err is PIN_RESTRICTED.
func IsPinRestricted(err error) bool {
	return tgerr.Is(err, ErrPinRestricted)
}

// IsPollAnswersInvalid reports whether err is POLL_ANSWERS_INVALID.
func IsPollAnswersInvalid(err error) bool {
	return tgerr.Is(err, ErrPollAnswersInvalid)
}

// IsPollAnswerInvalid reports whether err is POLL_ANSWER_INVALID.
func IsPollAnswerInvalid(err error) bool {
	return tgerr.Is(err, ErrPollAnswerInvalid)
}

// IsPollOptionDuplicate reports whether err is POLL_OPTION_DUPLICATE.
func IsPollOptionDuplicate(err error) bool {
	return tgerr.Is(err, ErrPollOptionDuplicate)
}

// IsPollOptionInvalid reports whether err is POLL_OPTION_INVALID.
func IsPollOptionInvalid(err error) bool {
	return tgerr.Is(err, ErrPollOptionInvalid)
}

// IsPollQuestionInvalid reports whether err is POLL_QUESTION_INVALID.
func IsPollQuestionInvalid(err error) bool {
	return tgerr.Is(err, ErrPollQuestionInvalid)
}

// IsPollVoteRequired reports whether err is POLL_VOTE_REQUIRED.
func IsPollVoteRequired(err error) bool {
	return tgerr.Is(err, ErrPollVoteRequired)
}

// IsPremiumAccountRequired reports whether err is PREMIUM_ACCOUNT_REQUIRED.
func IsPremiumAccountRequired(err error) bool {
	return tgerr.Is(err, ErrPremiumAccountRequired)
}

// IsPreviousChatImportActiveWaitMin reports whether err is PREVIOUS_CHAT_IMPORT_ACTIVE_WAIT_MIN.
func IsPreviousChatImportActiveWaitMin(err error) bool {
	return tgerr.Is(err, ErrPreviousChatImportActiveWaitMin)
}

// IsPrivacyKeyInvalid reports whether err is PRIVACY_KEY_INVALID.
func IsPrivacyKeyInvalid(err error) bool {
	return tgerr.Is(err, ErrPrivacyKeyInvalid)
}

// IsPrivacyTooLong reports whether err is PRIVACY_TOO_LONG.
func IsPrivacyTooLong(err error) bool {
	return tgerr.Is(err, ErrPrivacyTooLong)
}

// IsPrivacyValueInvalid reports whether err is PRIVACY_VALUE_INVALID.
func IsPrivacyValueInvalid(err error) bool {
	return tgerr.Is(err, ErrPrivacyValueInvalid)
}

// IsPublicChannelMissing reports whether err is PUBLIC_CHANNEL_MISSING.
func IsPublicChannelMissing(err error) bool {
	return tgerr.Is(err, ErrPublicChannelMissing)
}

// IsPublicKeyRequired reports whether err is PUBLIC_KEY_REQUIRED.
func IsPublicKeyRequired(err error) bool {
	return tgerr.Is(err, ErrPublicKeyRequired)
}

// IsQueryIDEmpty reports whether err is QUERY_ID_EMPTY.
func IsQueryIDEmpty(err error) bool {
	return tgerr.Is(err, ErrQueryIDEmpty)
}

// IsQueryIDInvalid reports whether err is QUERY_ID_INVALID.
func IsQueryIDInvalid(err error) bool {
	return tgerr.Is(err, ErrQueryIDInvalid)
}

// IsQueryTooShort reports whether err is QUERY_TOO_SHORT.
func IsQueryTooShort(err error) bool {
	return tgerr.Is(err, ErrQueryTooShort)
}

// IsQuizAnswerMissing reports whether err is QUIZ_ANSWER_MISSING.
func IsQuizAnswerMissing(err error) bool {
	return tgerr.Is(err, ErrQuizAnswerMissing)
}

// IsQuizCorrectAnswersEmpty reports whether err is QUIZ_CORRECT_ANSWERS_EMPTY.
func IsQuizCorrectAnswersEmpty(err error) bool {
	return tgerr.Is(err, ErrQuizCorrectAnswersEmpty)
}

// IsQuizCorrectAnswersTooMuch reports whether err is QUIZ_CORRECT_ANSWERS_TOO_MUCH.
func IsQuizCorrectAnswersTooMuch(err error) bool {
	return tgerr.Is(err, ErrQuizCorrectAnswersTooMuch)
}

// IsQuizCorrectAnswerInvalid reports whether err is QUIZ_CORRECT_ANSWER_INVALID.
func IsQuizCorrectAnswerInvalid(err error) bool {
	return tgerr.Is(err, ErrQuizCorrectAnswerInvalid)
}

// IsQuizMultipleInvalid reports whether err is QUIZ_MULTIPLE_INVALID.
func IsQuizMultipleInvalid(err error) bool {
	return tgerr.Is(err, ErrQuizMultipleInvalid)
}

// IsRandomIDDuplicate reports whether err is RANDOM_ID_DUPLICATE.
func IsRandomIDDuplicate(err error) bool {
	return tgerr.Is(err, ErrRandomIDDuplicate)
}

// IsRandomIDEmpty reports whether err is RANDOM_ID_EMPTY.
func IsRandomIDEmpty(err error) bool {
	return tgerr.Is(err, ErrRandomIDEmpty)
}

// IsRandomIDInvalid reports whether err is RANDOM_ID_INVALID.
func IsRandomIDInvalid(err error) bool {
	return tgerr.Is(err, ErrRandomIDInvalid)
}

// IsRandomLengthInvalid reports whether err is RANDOM_LENGTH_INVALID.
func IsRandomLengthInvalid(err error) bool {
	return tgerr.Is(err, ErrRandomLengthInvalid)
}

// IsRangesInvalid reports whether err is RANGES_INVALID.
func IsRangesInvalid(err error) bool {
	return tgerr.Is(err, ErrRangesInvalid)
}

// IsReactionsTooMany reports whether err is REACTIONS_TOO_MANY.
func IsReactionsTooMany(err error) bool {
	return tgerr.Is(err, ErrReactionsTooMany)
}

// IsReactionEmpty reports whether err is REACTION_EMPTY.
func IsReactionEmpty(err error) bool {
	return tgerr.Is(err, ErrReactionEmpty)
}

// IsReactionInvalid reports whether err is REACTION_INVALID.
func IsReactionInvalid(err error) bool {
	return tgerr.Is(err, ErrReactionInvalid)
}

// IsReplyMarkupBuyEmpty reports whether err is REPLY_MARKUP_BUY_EMPTY.
func IsReplyMarkupBuyEmpty(err error) bool {
	return tgerr.Is(err, ErrReplyMarkupBuyEmpty)
}

// IsReplyMarkupInvalid reports whether err is REPLY_MARKUP_INVALID.
func IsReplyMarkupInvalid(err error) bool {
	return tgerr.Is(err, ErrReplyMarkupInvalid)
}

// IsReplyMarkupTooLong reports whether err is REPLY_MARKUP_TOO_LONG.
func IsReplyMarkupTooLong(err error) bool {
	return tgerr.Is(err, ErrReplyMarkupTooLong)
}

// IsResetRequestMissing reports whether err is RESET_REQUEST_MISSING.
func IsResetRequestMissing(err error) bool {
	return tgerr.Is(err, ErrResetRequestMissing)
}

// IsResultsTooMuch reports whether err is RESULTS_TOO_MUCH.
func IsResultsTooMuch(err error) bool {
	return tgerr.Is(err, ErrResultsTooMuch)
}

// IsResultIDDuplicate reports whether err is RESULT_ID_DUPLICATE.
func IsResultIDDuplicate(err error) bool {
	return tgerr.Is(err, ErrResultIDDuplicate)
}

// IsResultIDEmpty reports whether err is RESULT_ID_EMPTY.
func IsResultIDEmpty(err error) bool {
	return tgerr.Is(err, ErrResultIDEmpty)
}

// IsResultIDInvalid reports whether err is RESULT_ID_INVALID.
func IsResultIDInvalid(err error) bool {
	return tgerr.Is(err, ErrResultIDInvalid)
}

// IsResultTypeInvalid reports whether err is RESULT_TYPE_INVALID.
func IsResultTypeInvalid(err error) bool {
	return tgerr.Is(err, ErrResultTypeInvalid)
}

// IsRevoteNotAllowed reports whether err is REVOTE_NOT_ALLOWED.
func IsRevoteNotAllowed(err error) bool {
	return tgerr.Is(err, ErrRevoteNotAllowed)
}

// IsRightsNotModified reports whether err is RIGHTS_NOT_MODIFIED.
func IsRightsNotModified(err error) bool {
	return tgerr.Is(err, ErrRightsNotModified)
}

// IsRightForbidden reports whether err is RIGHT_FORBIDDEN.
func IsRightForbidden(err error) bool {
	return tgerr.Is(err, ErrRightForbidden)
}

// IsRsaDecryptFailed reports whether err is RSA_DECRYPT_FAILED.
func IsRsaDecryptFailed(err error) bool {
	return tgerr.Is(err, ErrRsaDecryptFailed)
}

// IsScheduleBotNotAllowed reports whether err is SCHEDULE_BOT_NOT_ALLOWED.
func IsScheduleBotNotAllowed(err error) bool {
	return tgerr.Is(err, ErrScheduleBotNotAllowed)
}

// IsScheduleDateInvalid reports whether err is SCHEDULE_DATE_INVALID.
func IsScheduleDateInvalid(err error) bool {
	return tgerr.Is(err, ErrScheduleDateInvalid)
}

// IsScheduleDateTooLate reports whether err is SCHEDULE_DATE_TOO_LATE.
func IsScheduleDateTooLate(err error) bool {
	return tgerr.Is(err, ErrScheduleDateTooLate)
}

// IsScheduleStatusPrivate reports whether err is SCHEDULE_STATUS_PRIVATE.
func IsScheduleStatusPrivate(err error) bool {
	return tgerr.Is(err, ErrScheduleStatusPrivate)
}

// IsScheduleTooMuch reports whether err is SCHEDULE_TOO_MUCH.
func IsScheduleTooMuch(err error) bool {
	return tgerr.Is(err, ErrScheduleTooMuch)
}

// IsScoreInvalid reports whether err is SCORE_INVALID.
func IsScoreInvalid(err error) bool {
	return tgerr.Is(err, ErrScoreInvalid)
}

// IsSearchQueryEmpty reports whether err is SEARCH_QUERY_EMPTY.
func IsSearchQueryEmpty(err error) bool {
	return tgerr.Is(err, ErrSearchQueryEmpty)
}

// IsSearchWithLinkNotSupported reports whether err is SEARCH_WITH_LINK_NOT_SUPPORTED.
func IsSearchWithLinkNotSupported(err error) bool {
	return tgerr.Is(err, ErrSearchWithLinkNotSupported)
}

// IsSecondsInvalid reports whether err is SECONDS_INVALID.
func IsSecondsInvalid(err error) bool {
	return tgerr.Is(err, ErrSecondsInvalid)
}

// IsSendAsPeerInvalid reports whether err is SEND_AS_PEER_INVALID.
func IsSendAsPeerInvalid(err error) bool {
	return tgerr.Is(err, ErrSendAsPeerInvalid)
}

// IsSendCodeUnavailable reports whether err is SEND_CODE_UNAVAILABLE.
func IsSendCodeUnavailable(err error) bool {
	return tgerr.Is(err, ErrSendCodeUnavailable)
}

// IsSendMessageMediaInvalid reports whether err is SEND_MESSAGE_MEDIA_INVALID.
func IsSendMessageMediaInvalid(err error) bool {
	return tgerr.Is(err, ErrSendMessageMediaInvalid)
}

// IsSendMessageTypeInvalid reports whether err is SEND_MESSAGE_TYPE_INVALID.
func IsSendMessageTypeInvalid(err error) bool {
	return tgerr.Is(err, ErrSendMessageTypeInvalid)
}

// IsSensitiveChangeForbidden reports whether err is SENSITIVE_CHANGE_FORBIDDEN.
func IsSensitiveChangeForbidden(err error) bool {
	return tgerr.Is(err, ErrSensitiveChangeForbidden)
}

// IsSessionTooFresh reports whether err is SESSION_TOO_FRESH.
func IsSessionTooFresh(err error) bool {
	return tgerr.Is(err, ErrSessionTooFresh)
}

// IsSettingsInvalid reports whether err is SETTINGS_INVALID.
func IsSettingsInvalid(err error) bool {
	return tgerr.Is(err, ErrSettingsInvalid)
}

// IsSHA256HashInvalid reports whether err is SHA256_HASH_INVALID.
func IsSHA256HashInvalid(err error) bool {
	return tgerr.Is(err, ErrSHA256HashInvalid)
}

// IsShortNameInvalid reports whether err is SHORT_NAME_INVALID.
func IsShortNameInvalid(err error) bool {
	return tgerr.Is(err, ErrShortNameInvalid)
}

// IsShortNameOccupied reports whether err is SHORT_NAME_OCCUPIED.
func IsShortNameOccupied(err error) bool {
	return tgerr.Is(err, ErrShortNameOccupied)
}

// IsSignInFailed reports whether err is SIGN_IN_FAILED.
func IsSignInFailed(err error) bool {
	return tgerr.Is(err, ErrSignInFailed)
}

// IsSlowmodeMultiMsgsDisabled reports whether err is SLOWMODE_MULTI_MSGS_DISABLED.
func IsSlowmodeMultiMsgsDisabled(err error) bool {
	return tgerr.Is(err, ErrSlowmodeMultiMsgsDisabled)
}

// IsSlowmodeWait reports whether err is SLOWMODE_WAIT.
func IsSlowmodeWait(err error) bool {
	return tgerr.Is(err, ErrSlowmodeWait)
}

// IsSMSCodeCreateFailed reports whether err is SMS_CODE_CREATE_FAILED.
func IsSMSCodeCreateFailed(err error) bool {
	return tgerr.Is(err, ErrSMSCodeCreateFailed)
}

// IsSRPIDInvalid reports whether err is SRP_ID_INVALID.
func IsSRPIDInvalid(err error) bool {
	return tgerr.Is(err, ErrSRPIDInvalid)
}

// IsSRPPasswordChanged reports whether err is SRP_PASSWORD_CHANGED.
func IsSRPPasswordChanged(err error) bool {
	return tgerr.Is(err, ErrSRPPasswordChanged)
}

// IsStartParamEmpty reports whether err is START_PARAM_EMPTY.
func IsStartParamEmpty(err error) bool {
	return tgerr.Is(err, ErrStartParamEmpty)
}

// IsStartParamInvalid reports whether err is START_PARAM_INVALID.
func IsStartParamInvalid(err error) bool {
	return tgerr.Is(err, ErrStartParamInvalid)
}

// IsStartParamTooLong reports whether err is START_PARAM_TOO_LONG.
func IsStartParamTooLong(err error) bool {
	return tgerr.Is(err, ErrStartParamTooLong)
}

// IsStickerpackStickersTooMuch reports whether err is STICKERPACK_STICKERS_TOO_MUCH.
func IsStickerpackStickersTooMuch(err error) bool {
	return tgerr.Is(err, ErrStickerpackStickersTooMuch)
}

// IsStickersetInvalid reports whether err is STICKERSET_INVALID.
func IsStickersetInvalid(err error) bool {
	return tgerr.Is(err, ErrStickersetInvalid)
}

// IsStickersetOwnerAnonymous reports whether err is STICKERSET_OWNER_ANONYMOUS.
func IsStickersetOwnerAnonymous(err error) bool {
	return tgerr.Is(err, ErrStickersetOwnerAnonymous)
}

// IsStickersEmpty reports whether err is STICKERS_EMPTY.
func IsStickersEmpty(err error) bool {
	return tgerr.Is(err, ErrStickersEmpty)
}

// IsStickersTooMuch reports whether err is STICKERS_TOO_MUCH.
func IsStickersTooMuch(err error) bool {
	return tgerr.Is(err, ErrStickersTooMuch)
}

// IsStickerDocumentInvalid reports whether err is STICKER_DOCUMENT_INVALID.
func IsStickerDocumentInvalid(err error) bool {
	return tgerr.Is(err, ErrStickerDocumentInvalid)
}

// IsStickerEmojiInvalid reports whether err is STICKER_EMOJI_INVALID.
func IsStickerEmojiInvalid(err error) bool {
	return tgerr.Is(err, ErrStickerEmojiInvalid)
}

// IsStickerFileInvalid reports whether err is STICKER_FILE_INVALID.
func IsStickerFileInvalid(err error) bool {
	return tgerr.Is(err, ErrStickerFileInvalid)
}

// IsStickerGifDimensions reports whether err is STICKER_GIF_DIMENSIONS.
func IsStickerGifDimensions(err error) bool {
	return tgerr.Is(err, ErrStickerGifDimensions)
}

// IsStickerIDInvalid reports whether err is STICKER_ID_INVALID.
func IsStickerIDInvalid(err error) bool {
	return tgerr.Is(err, ErrStickerIDInvalid)
}

// IsStickerInvalid reports whether err is STICKER_INVALID.
func IsStickerInvalid(err error) bool {
	return tgerr.Is(err, ErrStickerInvalid)
}

// IsStickerMimeInvalid reports whether err is STICKER_MIME_INVALID.
func IsStickerMimeInvalid(err error) bool {
	return tgerr.Is(err, ErrStickerMimeInvalid)
}

// IsStickerPngDimensions reports whether err is STICKER_PNG_DIMENSIONS.
func IsStickerPngDimensions(err error) bool {
	return tgerr.Is(err, ErrStickerPngDimensions)
}

// IsStickerPngNopng reports whether err is STICKER_PNG_NOPNG.
func IsStickerPngNopng(err error) bool {
	return tgerr.Is(err, ErrStickerPngNopng)
}

// IsStickerTgsNodoc reports whether err is STICKER_TGS_NODOC.
func IsStickerTgsNodoc(err error) bool {
	return tgerr.Is(err, ErrStickerTgsNodoc)
}

// IsStickerTgsNotgs reports whether err is STICKER_TGS_NOTGS.
func IsStickerTgsNotgs(err error) bool {
	return tgerr.Is(err, ErrStickerTgsNotgs)
}

// IsStickerThumbPngNopng reports whether err is STICKER_THUMB_PNG_NOPNG.
func IsStickerThumbPngNopng(err error) bool {
	return tgerr.Is(err, ErrStickerThumbPngNopng)
}

// IsStickerThumbTgsNotgs reports whether err is STICKER_THUMB_TGS_NOTGS.
func IsStickerThumbTgsNotgs(err error) bool {
	return tgerr.Is(err, ErrStickerThumbTgsNotgs)
}

// IsStickerVideoBig reports whether err is STICKER_VIDEO_BIG.
func IsStickerVideoBig(err error) bool {
	return tgerr.Is(err, ErrStickerVideoBig)
}

// IsStickerVideoNodoc reports whether err is STICKER_VIDEO_NODOC.
func IsStickerVideoNodoc(err error) bool {
	return tgerr.Is(err, ErrStickerVideoNodoc)
}

// IsStickerVideoNowebm reports whether err is STICKER_VIDEO_NOWEBM.
func IsStickerVideoNowebm(err error) bool {
	return tgerr.Is(err, ErrStickerVideoNowebm)
}

// IsSwitchPmTextEmpty reports whether err is SWITCH_PM_TEXT_EMPTY.
func IsSwitchPmTextEmpty(err error) bool {
	return tgerr.Is(err, ErrSwitchPmTextEmpty)
}

// IsTakeoutInitDelay reports whether err is TAKEOUT_INIT_DELAY.
func IsTakeoutInitDelay(err error) bool {
	return tgerr.Is(err, ErrTakeoutInitDelay)
}

// IsTakeoutRequired reports whether err is TAKEOUT_REQUIRED.
func IsTakeoutRequired(err error) bool {
	return tgerr.Is(err, ErrTakeoutRequired)
}

// IsTaskAlreadyExists reports whether err is TASK_ALREADY_EXISTS.
func IsTaskAlreadyExists(err error) bool {
	return tgerr.Is(err, ErrTaskAlreadyExists)
}

// IsTempAuthKeyAlreadyBound reports whether err is TEMP_AUTH_KEY_ALREADY_BOUND.
func IsTempAuthKeyAlreadyBound(err error) bool {
	return tgerr.Is(err, ErrTempAuthKeyAlreadyBound)
}

// IsTempAuthKeyEmpty reports whether err is TEMP_AUTH_KEY_EMPTY.
func IsTempAuthKeyEmpty(err error) bool {
	return tgerr.Is(err, ErrTempAuthKeyEmpty)
}

// IsThemeFileInvalid reports whether err is THEME_FILE_INVALID.
func IsThemeFileInvalid(err error) bool {
	return tgerr.Is(err, ErrThemeFileInvalid)
}

// IsThemeFormatInvalid reports whether err is THEME_FORMAT_INVALID.
func IsThemeFormatInvalid(err error) bool {
	return tgerr.Is(err, ErrThemeFormatInvalid)
}

// IsThemeInvalid reports whether err is THEME_INVALID.
func IsThemeInvalid(err error) bool {
	return tgerr.Is(err, ErrThemeInvalid)
}

// IsThemeMimeInvalid reports whether err is THEME_MIME_INVALID.
func IsThemeMimeInvalid(err error) bool {
	return tgerr.Is(err, ErrThemeMimeInvalid)
}

// IsThemeTitleInvalid reports whether err is THEME_TITLE_INVALID.
func IsThemeTitleInvalid(err error) bool {
	return tgerr.Is(err, ErrThemeTitleInvalid)
}

// IsTitleInvalid reports whether err is TITLE_INVALID.
func IsTitleInvalid(err error) bool {
	return tgerr.Is(err, ErrTitleInvalid)
}

// IsTmpPasswordDisabled reports whether err is TMP_PASSWORD_DISABLED.
func IsTmpPasswordDisabled(err error) bool {
	return tgerr.Is(err, ErrTmpPasswordDisabled)
}

// IsTokenEmpty reports whether err is TOKEN_EMPTY.
func IsTokenEmpty(err error) bool {
	return tgerr.Is(err, ErrTokenEmpty)
}

// IsTokenInvalid reports whether err is TOKEN_INVALID.
func IsTokenInvalid(err error) bool {
	return tgerr.Is(err, ErrTokenInvalid)
}

// IsTokenTypeInvalid reports whether err is TOKEN_TYPE_INVALID.
func IsTokenTypeInvalid(err error) bool {
	return tgerr.Is(err, ErrTokenTypeInvalid)
}

// IsTopicsEmpty reports whether err is TOPICS_EMPTY.
func IsTopicsEmpty(err error) bool {
	return tgerr.Is(err, ErrTopicsEmpty)
}

// IsTopicClosed reports whether err is TOPIC_CLOSED.
func IsTopicClosed(err error) bool {
	return tgerr.Is(err, ErrTopicClosed)
}

// IsTopicDeleted reports whether err is TOPIC_DELETED.
func IsTopicDeleted(err error) bool {
	return tgerr.Is(err, ErrTopicDeleted)
}

// IsTopicIDInvalid reports whether err is TOPIC_ID_INVALID.
func IsTopicIDInvalid(err error) bool {
	return tgerr.Is(err, ErrTopicIDInvalid)
}

// IsTopicNotModified reports whether err is TOPIC_NOT_MODIFIED.
func IsTopicNotModified(err error) bool {
	return tgerr.Is(err, ErrTopicNotModified)
}

// IsToLangInvalid reports whether err is TO_LANG_INVALID.
func IsToLangInvalid(err error) bool {
	return tgerr.Is(err, ErrToLangInvalid)
}

// IsTranscriptionFailed reports whether err is TRANSCRIPTION_FAILED.
func IsTranscriptionFailed(err error) bool {
	return tgerr.Is(err, ErrTranscriptionFailed)
}

// IsTTLDaysInvalid reports whether err is TTL_DAYS_INVALID.
func IsTTLDaysInvalid(err error) bool {
	return tgerr.Is(err, ErrTTLDaysInvalid)
}

// IsTTLMediaInvalid reports whether err is TTL_MEDIA_INVALID.
func IsTTLMediaInvalid(err error) bool {
	return tgerr.Is(err, ErrTTLMediaInvalid)
}

// IsTTLPeriodInvalid reports whether err is TTL_PERIOD_INVALID.
func IsTTLPeriodInvalid(err error) bool {
	return tgerr.Is(err, ErrTTLPeriodInvalid)
}

// IsTypesEmpty reports whether err is TYPES_EMPTY.
func IsTypesEmpty(err error) bool {
	return tgerr.Is(err, ErrTypesEmpty)
}

// IsTimeout reports whether err is Timeout.
func IsTimeout(err error) bool {
	return tgerr.Is(err, ErrTimeout)
}

// IsUntilDateInvalid reports whether err is UNTIL_DATE_INVALID.
func IsUntilDateInvalid(err error) bool {
	return tgerr.Is(err, ErrUntilDateInvalid)
}

// IsURLInvalid reports whether err is URL_INVALID.
func IsURLInvalid(err error) bool {
	return tgerr.Is(err, ErrURLInvalid)
}

// IsUsageLimitInvalid reports whether err is USAGE_LIMIT_INVALID.
func IsUsageLimitInvalid(err error) bool {
	return tgerr.Is(err, ErrUsageLimitInvalid)
}

// IsUsernamesActiveTooMuch reports whether err is USERNAMES_ACTIVE_TOO_MUCH.
func IsUsernamesActiveTooMuch(err error) bool {
	return tgerr.Is(err, ErrUsernamesActiveTooMuch)
}

// IsUsernameInvalid reports whether err is USERNAME_INVALID.
func IsUsernameInvalid(err error) bool {
	return tgerr.Is(err, ErrUsernameInvalid)
}

// IsUsernameNotModified reports whether err is USERNAME_NOT_MODIFIED.
func IsUsernameNotModified(err error) bool {
	return tgerr.Is(err, ErrUsernameNotModified)
}

// IsUsernameNotOccupied reports whether err is USERNAME_NOT_OCCUPIED.
func IsUsernameNotOccupied(err error) bool {
	return tgerr.Is(err, ErrUsernameNotOccupied)
}

// IsUsernameOccupied reports whether err is USERNAME_OCCUPIED.
func IsUsernameOccupied(err error) bool {
	return tgerr.Is(err, ErrUsernameOccupied)
}

// IsUsernamePurchaseAvailable reports whether err is USERNAME_PURCHASE_AVAILABLE.
func IsUsernamePurchaseAvailable(err error) bool {
	return tgerr.Is(err, ErrUsernamePurchaseAvailable)
}

// IsUsernameUnsynchronized reports whether err is USERNAME_UNSYNCHRONIZED.
func IsUsernameUnsynchronized(err error) bool {
	return tgerr.Is(err, ErrUsernameUnsynchronized)
}

// IsUserpicPrivacyRequired reports whether err is USERPIC_PRIVACY_REQUIRED.
func IsUserpicPrivacyRequired(err error) bool {
	return tgerr.Is(err, ErrUserpicPrivacyRequired)
}

// IsUserpicUploadRequired reports whether err is USERPIC_UPLOAD_REQUIRED.
func IsUserpicUploadRequired(err error) bool {
	return tgerr.Is(err, ErrUserpicUploadRequired)
}

// IsUsersTooFew reports whether err is USERS_TOO_FEW.
func IsUsersTooFew(err error) bool {
	return tgerr.Is(err, ErrUsersTooFew)
}

// IsUsersTooMuch reports whether err is USERS_TOO_MUCH.
func IsUsersTooMuch(err error) bool {
	return tgerr.Is(err, ErrUsersTooMuch)
}

// IsUserAdminInvalid reports whether err is USER_ADMIN_INVALID.
func IsUserAdminInvalid(err error) bool {
	return tgerr.Is(err, ErrUserAdminInvalid)
}

// IsUserAlreadyInvited reports whether err is USER_ALREADY_INVITED.
func IsUserAlreadyInvited(err error) bool {
	return tgerr.Is(err, ErrUserAlreadyInvited)
}

// IsUserAlreadyParticipant reports whether err is USER_ALREADY_PARTICIPANT.
func IsUserAlreadyParticipant(err error) bool {
	return tgerr.Is(err, ErrUserAlreadyParticipant)
}

// IsUserBannedInChannel reports whether err is USER_BANNED_IN_CHANNEL.
func IsUserBannedInChannel(err error) bool {
	return tgerr.Is(err, ErrUserBannedInChannel)
}

// IsUserBlocked reports whether err is USER_BLOCKED.
func IsUserBlocked(err error) bool {
	return tgerr.Is(err, ErrUserBlocked)
}

// IsUserBot reports whether err is USER_BOT.
func IsUserBot(err error) bool {
	return tgerr.Is(err, ErrUserBot)
}

// IsUserBotInvalid reports whether err is USER_BOT_INVALID.
func IsUserBotInvalid(err error) bool {
	return tgerr.Is(err, ErrUserBotInvalid)
}

// IsUserBotRequired reports whether err is USER_BOT_REQUIRED.
func IsUserBotRequired(err error) bool {
	return tgerr.Is(err, ErrUserBotRequired)
}

// IsUserChannelsTooMuch reports whether err is USER_CHANNELS_TOO_MUCH.
func IsUserChannelsTooMuch(err error) bool {
	return tgerr.Is(err, ErrUserChannelsTooMuch)
}

// IsUserCreator reports whether err is USER_CREATOR.
func IsUserCreator(err error) bool {
	return tgerr.Is(err, ErrUserCreator)
}

// IsUserDeleted reports whether err is USER_DELETED.
func IsUserDeleted(err error) bool {
	return tgerr.Is(err, ErrUserDeleted)
}

// IsUserIDInvalid reports whether err is USER_ID_INVALID.
func IsUserIDInvalid(err error) bool {
	return tgerr.Is(err, ErrUserIDInvalid)
}

// IsUserInvalid reports whether err is USER_INVALID.
func IsUserInvalid(err error) bool {
	return tgerr.Is(err, ErrUserInvalid)
}

// IsUserIsBlocked reports whether err is USER_IS_BLOCKED.
func IsUserIsBlocked(err error) bool {
	return tgerr.Is(err, ErrUserIsBlocked)
}

// IsUserIsBot reports whether err is USER_IS_BOT.
func IsUserIsBot(err error) bool {
	return tgerr.Is(err, ErrUserIsBot)
}

// IsUserKicked reports whether err is USER_KICKED.
func IsUserKicked(err error) bool {
	return tgerr.Is(err, ErrUserKicked)
}

// IsUserNotMutualContact reports whether err is USER_NOT_MUTUAL_CONTACT.
func IsUserNotMutualContact(err error) bool {
	return tgerr.Is(err, ErrUserNotMutualContact)
}

// IsUserNotParticipant reports whether err is USER_NOT_PARTICIPANT.
func IsUserNotParticipant(err error) bool {
	return tgerr.Is(err, ErrUserNotParticipant)
}

// IsUserPrivacyRestricted reports whether err is USER_PRIVACY_RESTRICTED.
func IsUserPrivacyRestricted(err error) bool {
	return tgerr.Is(err, ErrUserPrivacyRestricted)
}

// IsUserRestricted reports whether err is USER_RESTRICTED.
func IsUserRestricted(err error) bool {
	return tgerr.Is(err, ErrUserRestricted)
}

// IsUserVolumeInvalid reports whether err is USER_VOLUME_INVALID.
func IsUserVolumeInvalid(err error) bool {
	return tgerr.Is(err, ErrUserVolumeInvalid)
}

// IsVideoContentTypeInvalid reports whether err is VIDEO_CONTENT_TYPE_INVALID.
func IsVideoContentTypeInvalid(err error) bool {
	return tgerr.Is(err, ErrVideoContentTypeInvalid)
}

// IsVideoFileInvalid reports whether err is VIDEO_FILE_INVALID.
func IsVideoFileInvalid(err error) bool {
	return tgerr.Is(err, ErrVideoFileInvalid)
}

// IsVideoTitleEmpty reports whether err is VIDEO_TITLE_EMPTY.
func IsVideoTitleEmpty(err error) bool {
	return tgerr.Is(err, ErrVideoTitleEmpty)
}

// IsVoiceMessagesForbidden reports whether err is VOICE_MESSAGES_FORBIDDEN.
func IsVoiceMessagesForbidden(err error) bool {
	return tgerr.Is(err, ErrVoiceMessagesForbidden)
}

// IsWallpaperFileInvalid reports whether err is WALLPAPER_FILE_INVALID.
func IsWallpaperFileInvalid(err error) bool {
	return tgerr.Is(err, ErrWallpaperFileInvalid)
}

// IsWallpaperInvalid reports whether err is WALLPAPER_INVALID.
func IsWallpaperInvalid(err error) bool {
	return tgerr.Is(err, ErrWallpaperInvalid)
}

// IsWallpaperMimeInvalid reports whether err is WALLPAPER_MIME_INVALID.
func IsWallpaperMimeInvalid(err error) bool {
	return tgerr.Is(err, ErrWallpaperMimeInvalid)
}

// IsWcConvertURLInvalid reports whether err is WC_CONVERT_URL_INVALID.
func IsWcConvertURLInvalid(err error) bool {
	return tgerr.Is(err, ErrWcConvertURLInvalid)
}

// IsWebdocumentInvalid reports whether err is WEBDOCUMENT_INVALID.
func IsWebdocumentInvalid(err error) bool {
	return tgerr.Is(err, ErrWebdocumentInvalid)
}

// IsWebdocumentMimeInvalid reports whether err is WEBDOCUMENT_MIME_INVALID.
func IsWebdocumentMimeInvalid(err error) bool {
	return tgerr.Is(err, ErrWebdocumentMimeInvalid)
}

// IsWebdocumentSizeTooBig reports whether err is WEBDOCUMENT_SIZE_TOO_BIG.
func IsWebdocumentSizeTooBig(err error) bool {
	return tgerr.Is(err, ErrWebdocumentSizeTooBig)
}

// IsWebdocumentURLInvalid reports whether err is WEBDOCUMENT_URL_INVALID.
func IsWebdocumentURLInvalid(err error) bool {
	return tgerr.Is(err, ErrWebdocumentURLInvalid)
}

// IsWebpageCurlFailed reports whether err is WEBPAGE_CURL_FAILED.
func IsWebpageCurlFailed(err error) bool {
	return tgerr.Is(err, ErrWebpageCurlFailed)
}

// IsWebpageMediaEmpty reports whether err is WEBPAGE_MEDIA_EMPTY.
func IsWebpageMediaEmpty(err error) bool {
	return tgerr.Is(err, ErrWebpageMediaEmpty)
}

// IsWebpushAuthInvalid reports whether err is WEBPUSH_AUTH_INVALID.
func IsWebpushAuthInvalid(err error) bool {
	return tgerr.Is(err, ErrWebpushAuthInvalid)
}

// IsWebpushKeyInvalid reports whether err is WEBPUSH_KEY_INVALID.
func IsWebpushKeyInvalid(err error) bool {
	return tgerr.Is(err, ErrWebpushKeyInvalid)
}

// IsWebpushTokenInvalid reports whether err is WEBPUSH_TOKEN_INVALID.
func IsWebpushTokenInvalid(err error) bool {
	return tgerr.Is(err, ErrWebpushTokenInvalid)
}

// IsYouBlockedUser reports whether err is YOU_BLOCKED_USER.
func IsYouBlockedUser(err error) bool {
	return tgerr.Is(err, ErrYouBlockedUser)
}
