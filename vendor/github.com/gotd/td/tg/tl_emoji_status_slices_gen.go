//go:build !no_gotd_slices
// +build !no_gotd_slices

// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// EmojiStatusClassArray is adapter for slice of EmojiStatusClass.
type EmojiStatusClassArray []EmojiStatusClass

// Sort sorts slice of EmojiStatusClass.
func (s EmojiStatusClassArray) Sort(less func(a, b EmojiStatusClass) bool) EmojiStatusClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of EmojiStatusClass.
func (s EmojiStatusClassArray) SortStable(less func(a, b EmojiStatusClass) bool) EmojiStatusClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of EmojiStatusClass.
func (s EmojiStatusClassArray) Retain(keep func(x EmojiStatusClass) bool) EmojiStatusClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s EmojiStatusClassArray) First() (v EmojiStatusClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s EmojiStatusClassArray) Last() (v EmojiStatusClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *EmojiStatusClassArray) PopFirst() (v EmojiStatusClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero EmojiStatusClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *EmojiStatusClassArray) Pop() (v EmojiStatusClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsEmojiStatus returns copy with only EmojiStatus constructors.
func (s EmojiStatusClassArray) AsEmojiStatus() (to EmojiStatusArray) {
	for _, elem := range s {
		value, ok := elem.(*EmojiStatus)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsEmojiStatusUntil returns copy with only EmojiStatusUntil constructors.
func (s EmojiStatusClassArray) AsEmojiStatusUntil() (to EmojiStatusUntilArray) {
	for _, elem := range s {
		value, ok := elem.(*EmojiStatusUntil)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AppendOnlyNotEmpty appends only NotEmpty constructors to
// given slice.
func (s EmojiStatusClassArray) AppendOnlyNotEmpty(to []NotEmptyEmojiStatus) []NotEmptyEmojiStatus {
	for _, elem := range s {
		value, ok := elem.AsNotEmpty()
		if !ok {
			continue
		}
		to = append(to, value)
	}

	return to
}

// AsNotEmpty returns copy with only NotEmpty constructors.
func (s EmojiStatusClassArray) AsNotEmpty() (to []NotEmptyEmojiStatus) {
	return s.AppendOnlyNotEmpty(to)
}

// FirstAsNotEmpty returns first element of slice (if exists).
func (s EmojiStatusClassArray) FirstAsNotEmpty() (v NotEmptyEmojiStatus, ok bool) {
	value, ok := s.First()
	if !ok {
		return
	}
	return value.AsNotEmpty()
}

// LastAsNotEmpty returns last element of slice (if exists).
func (s EmojiStatusClassArray) LastAsNotEmpty() (v NotEmptyEmojiStatus, ok bool) {
	value, ok := s.Last()
	if !ok {
		return
	}
	return value.AsNotEmpty()
}

// PopFirstAsNotEmpty returns element of slice (if exists).
func (s *EmojiStatusClassArray) PopFirstAsNotEmpty() (v NotEmptyEmojiStatus, ok bool) {
	value, ok := s.PopFirst()
	if !ok {
		return
	}
	return value.AsNotEmpty()
}

// PopAsNotEmpty returns element of slice (if exists).
func (s *EmojiStatusClassArray) PopAsNotEmpty() (v NotEmptyEmojiStatus, ok bool) {
	value, ok := s.Pop()
	if !ok {
		return
	}
	return value.AsNotEmpty()
}

// EmojiStatusArray is adapter for slice of EmojiStatus.
type EmojiStatusArray []EmojiStatus

// Sort sorts slice of EmojiStatus.
func (s EmojiStatusArray) Sort(less func(a, b EmojiStatus) bool) EmojiStatusArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of EmojiStatus.
func (s EmojiStatusArray) SortStable(less func(a, b EmojiStatus) bool) EmojiStatusArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of EmojiStatus.
func (s EmojiStatusArray) Retain(keep func(x EmojiStatus) bool) EmojiStatusArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s EmojiStatusArray) First() (v EmojiStatus, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s EmojiStatusArray) Last() (v EmojiStatus, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *EmojiStatusArray) PopFirst() (v EmojiStatus, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero EmojiStatus
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *EmojiStatusArray) Pop() (v EmojiStatus, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// EmojiStatusUntilArray is adapter for slice of EmojiStatusUntil.
type EmojiStatusUntilArray []EmojiStatusUntil

// Sort sorts slice of EmojiStatusUntil.
func (s EmojiStatusUntilArray) Sort(less func(a, b EmojiStatusUntil) bool) EmojiStatusUntilArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of EmojiStatusUntil.
func (s EmojiStatusUntilArray) SortStable(less func(a, b EmojiStatusUntil) bool) EmojiStatusUntilArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of EmojiStatusUntil.
func (s EmojiStatusUntilArray) Retain(keep func(x EmojiStatusUntil) bool) EmojiStatusUntilArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s EmojiStatusUntilArray) First() (v EmojiStatusUntil, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s EmojiStatusUntilArray) Last() (v EmojiStatusUntil, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *EmojiStatusUntilArray) PopFirst() (v EmojiStatusUntil, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero EmojiStatusUntil
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *EmojiStatusUntilArray) Pop() (v EmojiStatusUntil, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
