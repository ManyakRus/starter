// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesReadReactionsRequest represents TL type `messages.readReactions#54aa7f8e`.
// Mark message reactions »¹ as read
//
// Links:
//  1. https://core.telegram.org/api/reactions
//
// See https://core.telegram.org/method/messages.readReactions for reference.
type MessagesReadReactionsRequest struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Peer
	Peer InputPeerClass
	// Mark as read only reactions to messages within the specified forum topic¹
	//
	// Links:
	//  1) https://core.telegram.org/api/forum#forum-topics
	//
	// Use SetTopMsgID and GetTopMsgID helpers.
	TopMsgID int
}

// MessagesReadReactionsRequestTypeID is TL type id of MessagesReadReactionsRequest.
const MessagesReadReactionsRequestTypeID = 0x54aa7f8e

// Ensuring interfaces in compile-time for MessagesReadReactionsRequest.
var (
	_ bin.Encoder     = &MessagesReadReactionsRequest{}
	_ bin.Decoder     = &MessagesReadReactionsRequest{}
	_ bin.BareEncoder = &MessagesReadReactionsRequest{}
	_ bin.BareDecoder = &MessagesReadReactionsRequest{}
)

func (r *MessagesReadReactionsRequest) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.Flags.Zero()) {
		return false
	}
	if !(r.Peer == nil) {
		return false
	}
	if !(r.TopMsgID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *MessagesReadReactionsRequest) String() string {
	if r == nil {
		return "MessagesReadReactionsRequest(nil)"
	}
	type Alias MessagesReadReactionsRequest
	return fmt.Sprintf("MessagesReadReactionsRequest%+v", Alias(*r))
}

// FillFrom fills MessagesReadReactionsRequest from given interface.
func (r *MessagesReadReactionsRequest) FillFrom(from interface {
	GetPeer() (value InputPeerClass)
	GetTopMsgID() (value int, ok bool)
}) {
	r.Peer = from.GetPeer()
	if val, ok := from.GetTopMsgID(); ok {
		r.TopMsgID = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesReadReactionsRequest) TypeID() uint32 {
	return MessagesReadReactionsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesReadReactionsRequest) TypeName() string {
	return "messages.readReactions"
}

// TypeInfo returns info about TL type.
func (r *MessagesReadReactionsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.readReactions",
		ID:   MessagesReadReactionsRequestTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "TopMsgID",
			SchemaName: "top_msg_id",
			Null:       !r.Flags.Has(0),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (r *MessagesReadReactionsRequest) SetFlags() {
	if !(r.TopMsgID == 0) {
		r.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (r *MessagesReadReactionsRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.readReactions#54aa7f8e as nil")
	}
	b.PutID(MessagesReadReactionsRequestTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *MessagesReadReactionsRequest) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.readReactions#54aa7f8e as nil")
	}
	r.SetFlags()
	if err := r.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.readReactions#54aa7f8e: field flags: %w", err)
	}
	if r.Peer == nil {
		return fmt.Errorf("unable to encode messages.readReactions#54aa7f8e: field peer is nil")
	}
	if err := r.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.readReactions#54aa7f8e: field peer: %w", err)
	}
	if r.Flags.Has(0) {
		b.PutInt(r.TopMsgID)
	}
	return nil
}

// Decode implements bin.Decoder.
func (r *MessagesReadReactionsRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.readReactions#54aa7f8e to nil")
	}
	if err := b.ConsumeID(MessagesReadReactionsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.readReactions#54aa7f8e: %w", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *MessagesReadReactionsRequest) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.readReactions#54aa7f8e to nil")
	}
	{
		if err := r.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.readReactions#54aa7f8e: field flags: %w", err)
		}
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.readReactions#54aa7f8e: field peer: %w", err)
		}
		r.Peer = value
	}
	if r.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.readReactions#54aa7f8e: field top_msg_id: %w", err)
		}
		r.TopMsgID = value
	}
	return nil
}

// GetPeer returns value of Peer field.
func (r *MessagesReadReactionsRequest) GetPeer() (value InputPeerClass) {
	if r == nil {
		return
	}
	return r.Peer
}

// SetTopMsgID sets value of TopMsgID conditional field.
func (r *MessagesReadReactionsRequest) SetTopMsgID(value int) {
	r.Flags.Set(0)
	r.TopMsgID = value
}

// GetTopMsgID returns value of TopMsgID conditional field and
// boolean which is true if field was set.
func (r *MessagesReadReactionsRequest) GetTopMsgID() (value int, ok bool) {
	if r == nil {
		return
	}
	if !r.Flags.Has(0) {
		return value, false
	}
	return r.TopMsgID, true
}

// MessagesReadReactions invokes method messages.readReactions#54aa7f8e returning error if any.
// Mark message reactions »¹ as read
//
// Links:
//  1. https://core.telegram.org/api/reactions
//
// Possible errors:
//
//	400 PEER_ID_INVALID: The provided peer id is invalid.
//
// See https://core.telegram.org/method/messages.readReactions for reference.
func (c *Client) MessagesReadReactions(ctx context.Context, request *MessagesReadReactionsRequest) (*MessagesAffectedHistory, error) {
	var result MessagesAffectedHistory

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
