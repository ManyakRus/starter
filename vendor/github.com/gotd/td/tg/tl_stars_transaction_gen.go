// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StarsTransaction represents TL type `starsTransaction#cc7079b2`.
//
// See https://core.telegram.org/constructor/starsTransaction for reference.
type StarsTransaction struct {
	// Flags field of StarsTransaction.
	Flags bin.Fields
	// Refund field of StarsTransaction.
	Refund bool
	// ID field of StarsTransaction.
	ID string
	// Stars field of StarsTransaction.
	Stars int64
	// Date field of StarsTransaction.
	Date int
	// Peer field of StarsTransaction.
	Peer StarsTransactionPeerClass
	// Title field of StarsTransaction.
	//
	// Use SetTitle and GetTitle helpers.
	Title string
	// Description field of StarsTransaction.
	//
	// Use SetDescription and GetDescription helpers.
	Description string
	// Photo field of StarsTransaction.
	//
	// Use SetPhoto and GetPhoto helpers.
	Photo WebDocumentClass
}

// StarsTransactionTypeID is TL type id of StarsTransaction.
const StarsTransactionTypeID = 0xcc7079b2

// Ensuring interfaces in compile-time for StarsTransaction.
var (
	_ bin.Encoder     = &StarsTransaction{}
	_ bin.Decoder     = &StarsTransaction{}
	_ bin.BareEncoder = &StarsTransaction{}
	_ bin.BareDecoder = &StarsTransaction{}
)

func (s *StarsTransaction) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.Refund == false) {
		return false
	}
	if !(s.ID == "") {
		return false
	}
	if !(s.Stars == 0) {
		return false
	}
	if !(s.Date == 0) {
		return false
	}
	if !(s.Peer == nil) {
		return false
	}
	if !(s.Title == "") {
		return false
	}
	if !(s.Description == "") {
		return false
	}
	if !(s.Photo == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StarsTransaction) String() string {
	if s == nil {
		return "StarsTransaction(nil)"
	}
	type Alias StarsTransaction
	return fmt.Sprintf("StarsTransaction%+v", Alias(*s))
}

// FillFrom fills StarsTransaction from given interface.
func (s *StarsTransaction) FillFrom(from interface {
	GetRefund() (value bool)
	GetID() (value string)
	GetStars() (value int64)
	GetDate() (value int)
	GetPeer() (value StarsTransactionPeerClass)
	GetTitle() (value string, ok bool)
	GetDescription() (value string, ok bool)
	GetPhoto() (value WebDocumentClass, ok bool)
}) {
	s.Refund = from.GetRefund()
	s.ID = from.GetID()
	s.Stars = from.GetStars()
	s.Date = from.GetDate()
	s.Peer = from.GetPeer()
	if val, ok := from.GetTitle(); ok {
		s.Title = val
	}

	if val, ok := from.GetDescription(); ok {
		s.Description = val
	}

	if val, ok := from.GetPhoto(); ok {
		s.Photo = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StarsTransaction) TypeID() uint32 {
	return StarsTransactionTypeID
}

// TypeName returns name of type in TL schema.
func (*StarsTransaction) TypeName() string {
	return "starsTransaction"
}

// TypeInfo returns info about TL type.
func (s *StarsTransaction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "starsTransaction",
		ID:   StarsTransactionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Refund",
			SchemaName: "refund",
			Null:       !s.Flags.Has(3),
		},
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "Stars",
			SchemaName: "stars",
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "Title",
			SchemaName: "title",
			Null:       !s.Flags.Has(0),
		},
		{
			Name:       "Description",
			SchemaName: "description",
			Null:       !s.Flags.Has(1),
		},
		{
			Name:       "Photo",
			SchemaName: "photo",
			Null:       !s.Flags.Has(2),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (s *StarsTransaction) SetFlags() {
	if !(s.Refund == false) {
		s.Flags.Set(3)
	}
	if !(s.Title == "") {
		s.Flags.Set(0)
	}
	if !(s.Description == "") {
		s.Flags.Set(1)
	}
	if !(s.Photo == nil) {
		s.Flags.Set(2)
	}
}

// Encode implements bin.Encoder.
func (s *StarsTransaction) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starsTransaction#cc7079b2 as nil")
	}
	b.PutID(StarsTransactionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StarsTransaction) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode starsTransaction#cc7079b2 as nil")
	}
	s.SetFlags()
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starsTransaction#cc7079b2: field flags: %w", err)
	}
	b.PutString(s.ID)
	b.PutLong(s.Stars)
	b.PutInt(s.Date)
	if s.Peer == nil {
		return fmt.Errorf("unable to encode starsTransaction#cc7079b2: field peer is nil")
	}
	if err := s.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode starsTransaction#cc7079b2: field peer: %w", err)
	}
	if s.Flags.Has(0) {
		b.PutString(s.Title)
	}
	if s.Flags.Has(1) {
		b.PutString(s.Description)
	}
	if s.Flags.Has(2) {
		if s.Photo == nil {
			return fmt.Errorf("unable to encode starsTransaction#cc7079b2: field photo is nil")
		}
		if err := s.Photo.Encode(b); err != nil {
			return fmt.Errorf("unable to encode starsTransaction#cc7079b2: field photo: %w", err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StarsTransaction) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starsTransaction#cc7079b2 to nil")
	}
	if err := b.ConsumeID(StarsTransactionTypeID); err != nil {
		return fmt.Errorf("unable to decode starsTransaction#cc7079b2: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StarsTransaction) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode starsTransaction#cc7079b2 to nil")
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode starsTransaction#cc7079b2: field flags: %w", err)
		}
	}
	s.Refund = s.Flags.Has(3)
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode starsTransaction#cc7079b2: field id: %w", err)
		}
		s.ID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode starsTransaction#cc7079b2: field stars: %w", err)
		}
		s.Stars = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode starsTransaction#cc7079b2: field date: %w", err)
		}
		s.Date = value
	}
	{
		value, err := DecodeStarsTransactionPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode starsTransaction#cc7079b2: field peer: %w", err)
		}
		s.Peer = value
	}
	if s.Flags.Has(0) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode starsTransaction#cc7079b2: field title: %w", err)
		}
		s.Title = value
	}
	if s.Flags.Has(1) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode starsTransaction#cc7079b2: field description: %w", err)
		}
		s.Description = value
	}
	if s.Flags.Has(2) {
		value, err := DecodeWebDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode starsTransaction#cc7079b2: field photo: %w", err)
		}
		s.Photo = value
	}
	return nil
}

// SetRefund sets value of Refund conditional field.
func (s *StarsTransaction) SetRefund(value bool) {
	if value {
		s.Flags.Set(3)
		s.Refund = true
	} else {
		s.Flags.Unset(3)
		s.Refund = false
	}
}

// GetRefund returns value of Refund conditional field.
func (s *StarsTransaction) GetRefund() (value bool) {
	if s == nil {
		return
	}
	return s.Flags.Has(3)
}

// GetID returns value of ID field.
func (s *StarsTransaction) GetID() (value string) {
	if s == nil {
		return
	}
	return s.ID
}

// GetStars returns value of Stars field.
func (s *StarsTransaction) GetStars() (value int64) {
	if s == nil {
		return
	}
	return s.Stars
}

// GetDate returns value of Date field.
func (s *StarsTransaction) GetDate() (value int) {
	if s == nil {
		return
	}
	return s.Date
}

// GetPeer returns value of Peer field.
func (s *StarsTransaction) GetPeer() (value StarsTransactionPeerClass) {
	if s == nil {
		return
	}
	return s.Peer
}

// SetTitle sets value of Title conditional field.
func (s *StarsTransaction) SetTitle(value string) {
	s.Flags.Set(0)
	s.Title = value
}

// GetTitle returns value of Title conditional field and
// boolean which is true if field was set.
func (s *StarsTransaction) GetTitle() (value string, ok bool) {
	if s == nil {
		return
	}
	if !s.Flags.Has(0) {
		return value, false
	}
	return s.Title, true
}

// SetDescription sets value of Description conditional field.
func (s *StarsTransaction) SetDescription(value string) {
	s.Flags.Set(1)
	s.Description = value
}

// GetDescription returns value of Description conditional field and
// boolean which is true if field was set.
func (s *StarsTransaction) GetDescription() (value string, ok bool) {
	if s == nil {
		return
	}
	if !s.Flags.Has(1) {
		return value, false
	}
	return s.Description, true
}

// SetPhoto sets value of Photo conditional field.
func (s *StarsTransaction) SetPhoto(value WebDocumentClass) {
	s.Flags.Set(2)
	s.Photo = value
}

// GetPhoto returns value of Photo conditional field and
// boolean which is true if field was set.
func (s *StarsTransaction) GetPhoto() (value WebDocumentClass, ok bool) {
	if s == nil {
		return
	}
	if !s.Flags.Has(2) {
		return value, false
	}
	return s.Photo, true
}
