// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StatsBroadcastRevenueStats represents TL type `stats.broadcastRevenueStats#d07b4bad`.
//
// See https://core.telegram.org/constructor/stats.broadcastRevenueStats for reference.
type StatsBroadcastRevenueStats struct {
	// TopHoursGraph field of StatsBroadcastRevenueStats.
	TopHoursGraph StatsGraphClass
	// RevenueGraph field of StatsBroadcastRevenueStats.
	RevenueGraph StatsGraphClass
	// CurrentBalance field of StatsBroadcastRevenueStats.
	CurrentBalance int64
	// AvailableBalance field of StatsBroadcastRevenueStats.
	AvailableBalance int64
	// OverallRevenue field of StatsBroadcastRevenueStats.
	OverallRevenue int64
	// UsdRate field of StatsBroadcastRevenueStats.
	UsdRate float64
}

// StatsBroadcastRevenueStatsTypeID is TL type id of StatsBroadcastRevenueStats.
const StatsBroadcastRevenueStatsTypeID = 0xd07b4bad

// Ensuring interfaces in compile-time for StatsBroadcastRevenueStats.
var (
	_ bin.Encoder     = &StatsBroadcastRevenueStats{}
	_ bin.Decoder     = &StatsBroadcastRevenueStats{}
	_ bin.BareEncoder = &StatsBroadcastRevenueStats{}
	_ bin.BareDecoder = &StatsBroadcastRevenueStats{}
)

func (b *StatsBroadcastRevenueStats) Zero() bool {
	if b == nil {
		return true
	}
	if !(b.TopHoursGraph == nil) {
		return false
	}
	if !(b.RevenueGraph == nil) {
		return false
	}
	if !(b.CurrentBalance == 0) {
		return false
	}
	if !(b.AvailableBalance == 0) {
		return false
	}
	if !(b.OverallRevenue == 0) {
		return false
	}
	if !(b.UsdRate == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (b *StatsBroadcastRevenueStats) String() string {
	if b == nil {
		return "StatsBroadcastRevenueStats(nil)"
	}
	type Alias StatsBroadcastRevenueStats
	return fmt.Sprintf("StatsBroadcastRevenueStats%+v", Alias(*b))
}

// FillFrom fills StatsBroadcastRevenueStats from given interface.
func (b *StatsBroadcastRevenueStats) FillFrom(from interface {
	GetTopHoursGraph() (value StatsGraphClass)
	GetRevenueGraph() (value StatsGraphClass)
	GetCurrentBalance() (value int64)
	GetAvailableBalance() (value int64)
	GetOverallRevenue() (value int64)
	GetUsdRate() (value float64)
}) {
	b.TopHoursGraph = from.GetTopHoursGraph()
	b.RevenueGraph = from.GetRevenueGraph()
	b.CurrentBalance = from.GetCurrentBalance()
	b.AvailableBalance = from.GetAvailableBalance()
	b.OverallRevenue = from.GetOverallRevenue()
	b.UsdRate = from.GetUsdRate()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StatsBroadcastRevenueStats) TypeID() uint32 {
	return StatsBroadcastRevenueStatsTypeID
}

// TypeName returns name of type in TL schema.
func (*StatsBroadcastRevenueStats) TypeName() string {
	return "stats.broadcastRevenueStats"
}

// TypeInfo returns info about TL type.
func (b *StatsBroadcastRevenueStats) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stats.broadcastRevenueStats",
		ID:   StatsBroadcastRevenueStatsTypeID,
	}
	if b == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "TopHoursGraph",
			SchemaName: "top_hours_graph",
		},
		{
			Name:       "RevenueGraph",
			SchemaName: "revenue_graph",
		},
		{
			Name:       "CurrentBalance",
			SchemaName: "current_balance",
		},
		{
			Name:       "AvailableBalance",
			SchemaName: "available_balance",
		},
		{
			Name:       "OverallRevenue",
			SchemaName: "overall_revenue",
		},
		{
			Name:       "UsdRate",
			SchemaName: "usd_rate",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (b *StatsBroadcastRevenueStats) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode stats.broadcastRevenueStats#d07b4bad as nil")
	}
	buf.PutID(StatsBroadcastRevenueStatsTypeID)
	return b.EncodeBare(buf)
}

// EncodeBare implements bin.BareEncoder.
func (b *StatsBroadcastRevenueStats) EncodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode stats.broadcastRevenueStats#d07b4bad as nil")
	}
	if b.TopHoursGraph == nil {
		return fmt.Errorf("unable to encode stats.broadcastRevenueStats#d07b4bad: field top_hours_graph is nil")
	}
	if err := b.TopHoursGraph.Encode(buf); err != nil {
		return fmt.Errorf("unable to encode stats.broadcastRevenueStats#d07b4bad: field top_hours_graph: %w", err)
	}
	if b.RevenueGraph == nil {
		return fmt.Errorf("unable to encode stats.broadcastRevenueStats#d07b4bad: field revenue_graph is nil")
	}
	if err := b.RevenueGraph.Encode(buf); err != nil {
		return fmt.Errorf("unable to encode stats.broadcastRevenueStats#d07b4bad: field revenue_graph: %w", err)
	}
	buf.PutLong(b.CurrentBalance)
	buf.PutLong(b.AvailableBalance)
	buf.PutLong(b.OverallRevenue)
	buf.PutDouble(b.UsdRate)
	return nil
}

// Decode implements bin.Decoder.
func (b *StatsBroadcastRevenueStats) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode stats.broadcastRevenueStats#d07b4bad to nil")
	}
	if err := buf.ConsumeID(StatsBroadcastRevenueStatsTypeID); err != nil {
		return fmt.Errorf("unable to decode stats.broadcastRevenueStats#d07b4bad: %w", err)
	}
	return b.DecodeBare(buf)
}

// DecodeBare implements bin.BareDecoder.
func (b *StatsBroadcastRevenueStats) DecodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode stats.broadcastRevenueStats#d07b4bad to nil")
	}
	{
		value, err := DecodeStatsGraph(buf)
		if err != nil {
			return fmt.Errorf("unable to decode stats.broadcastRevenueStats#d07b4bad: field top_hours_graph: %w", err)
		}
		b.TopHoursGraph = value
	}
	{
		value, err := DecodeStatsGraph(buf)
		if err != nil {
			return fmt.Errorf("unable to decode stats.broadcastRevenueStats#d07b4bad: field revenue_graph: %w", err)
		}
		b.RevenueGraph = value
	}
	{
		value, err := buf.Long()
		if err != nil {
			return fmt.Errorf("unable to decode stats.broadcastRevenueStats#d07b4bad: field current_balance: %w", err)
		}
		b.CurrentBalance = value
	}
	{
		value, err := buf.Long()
		if err != nil {
			return fmt.Errorf("unable to decode stats.broadcastRevenueStats#d07b4bad: field available_balance: %w", err)
		}
		b.AvailableBalance = value
	}
	{
		value, err := buf.Long()
		if err != nil {
			return fmt.Errorf("unable to decode stats.broadcastRevenueStats#d07b4bad: field overall_revenue: %w", err)
		}
		b.OverallRevenue = value
	}
	{
		value, err := buf.Double()
		if err != nil {
			return fmt.Errorf("unable to decode stats.broadcastRevenueStats#d07b4bad: field usd_rate: %w", err)
		}
		b.UsdRate = value
	}
	return nil
}

// GetTopHoursGraph returns value of TopHoursGraph field.
func (b *StatsBroadcastRevenueStats) GetTopHoursGraph() (value StatsGraphClass) {
	if b == nil {
		return
	}
	return b.TopHoursGraph
}

// GetRevenueGraph returns value of RevenueGraph field.
func (b *StatsBroadcastRevenueStats) GetRevenueGraph() (value StatsGraphClass) {
	if b == nil {
		return
	}
	return b.RevenueGraph
}

// GetCurrentBalance returns value of CurrentBalance field.
func (b *StatsBroadcastRevenueStats) GetCurrentBalance() (value int64) {
	if b == nil {
		return
	}
	return b.CurrentBalance
}

// GetAvailableBalance returns value of AvailableBalance field.
func (b *StatsBroadcastRevenueStats) GetAvailableBalance() (value int64) {
	if b == nil {
		return
	}
	return b.AvailableBalance
}

// GetOverallRevenue returns value of OverallRevenue field.
func (b *StatsBroadcastRevenueStats) GetOverallRevenue() (value int64) {
	if b == nil {
		return
	}
	return b.OverallRevenue
}

// GetUsdRate returns value of UsdRate field.
func (b *StatsBroadcastRevenueStats) GetUsdRate() (value float64) {
	if b == nil {
		return
	}
	return b.UsdRate
}
