// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PaymentsUserStarGifts represents TL type `payments.userStarGifts#6b65b517`.
// Gifts¹ displayed on a user's profile.
//
// Links:
//  1. https://core.telegram.org/api/gifts
//
// See https://core.telegram.org/constructor/payments.userStarGifts for reference.
type PaymentsUserStarGifts struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Total number of gifts displayed on the profile.
	Count int
	// The gifts.
	Gifts []UserStarGift
	// Offset for pagination¹.
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets
	//
	// Use SetNextOffset and GetNextOffset helpers.
	NextOffset string
	// Users mentioned in the gifts vector.
	Users []UserClass
}

// PaymentsUserStarGiftsTypeID is TL type id of PaymentsUserStarGifts.
const PaymentsUserStarGiftsTypeID = 0x6b65b517

// Ensuring interfaces in compile-time for PaymentsUserStarGifts.
var (
	_ bin.Encoder     = &PaymentsUserStarGifts{}
	_ bin.Decoder     = &PaymentsUserStarGifts{}
	_ bin.BareEncoder = &PaymentsUserStarGifts{}
	_ bin.BareDecoder = &PaymentsUserStarGifts{}
)

func (u *PaymentsUserStarGifts) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Flags.Zero()) {
		return false
	}
	if !(u.Count == 0) {
		return false
	}
	if !(u.Gifts == nil) {
		return false
	}
	if !(u.NextOffset == "") {
		return false
	}
	if !(u.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *PaymentsUserStarGifts) String() string {
	if u == nil {
		return "PaymentsUserStarGifts(nil)"
	}
	type Alias PaymentsUserStarGifts
	return fmt.Sprintf("PaymentsUserStarGifts%+v", Alias(*u))
}

// FillFrom fills PaymentsUserStarGifts from given interface.
func (u *PaymentsUserStarGifts) FillFrom(from interface {
	GetCount() (value int)
	GetGifts() (value []UserStarGift)
	GetNextOffset() (value string, ok bool)
	GetUsers() (value []UserClass)
}) {
	u.Count = from.GetCount()
	u.Gifts = from.GetGifts()
	if val, ok := from.GetNextOffset(); ok {
		u.NextOffset = val
	}

	u.Users = from.GetUsers()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PaymentsUserStarGifts) TypeID() uint32 {
	return PaymentsUserStarGiftsTypeID
}

// TypeName returns name of type in TL schema.
func (*PaymentsUserStarGifts) TypeName() string {
	return "payments.userStarGifts"
}

// TypeInfo returns info about TL type.
func (u *PaymentsUserStarGifts) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "payments.userStarGifts",
		ID:   PaymentsUserStarGiftsTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Count",
			SchemaName: "count",
		},
		{
			Name:       "Gifts",
			SchemaName: "gifts",
		},
		{
			Name:       "NextOffset",
			SchemaName: "next_offset",
			Null:       !u.Flags.Has(0),
		},
		{
			Name:       "Users",
			SchemaName: "users",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (u *PaymentsUserStarGifts) SetFlags() {
	if !(u.NextOffset == "") {
		u.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (u *PaymentsUserStarGifts) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode payments.userStarGifts#6b65b517 as nil")
	}
	b.PutID(PaymentsUserStarGiftsTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *PaymentsUserStarGifts) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode payments.userStarGifts#6b65b517 as nil")
	}
	u.SetFlags()
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode payments.userStarGifts#6b65b517: field flags: %w", err)
	}
	b.PutInt(u.Count)
	b.PutVectorHeader(len(u.Gifts))
	for idx, v := range u.Gifts {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode payments.userStarGifts#6b65b517: field gifts element with index %d: %w", idx, err)
		}
	}
	if u.Flags.Has(0) {
		b.PutString(u.NextOffset)
	}
	b.PutVectorHeader(len(u.Users))
	for idx, v := range u.Users {
		if v == nil {
			return fmt.Errorf("unable to encode payments.userStarGifts#6b65b517: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode payments.userStarGifts#6b65b517: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *PaymentsUserStarGifts) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode payments.userStarGifts#6b65b517 to nil")
	}
	if err := b.ConsumeID(PaymentsUserStarGiftsTypeID); err != nil {
		return fmt.Errorf("unable to decode payments.userStarGifts#6b65b517: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *PaymentsUserStarGifts) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode payments.userStarGifts#6b65b517 to nil")
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode payments.userStarGifts#6b65b517: field flags: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode payments.userStarGifts#6b65b517: field count: %w", err)
		}
		u.Count = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode payments.userStarGifts#6b65b517: field gifts: %w", err)
		}

		if headerLen > 0 {
			u.Gifts = make([]UserStarGift, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value UserStarGift
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode payments.userStarGifts#6b65b517: field gifts: %w", err)
			}
			u.Gifts = append(u.Gifts, value)
		}
	}
	if u.Flags.Has(0) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode payments.userStarGifts#6b65b517: field next_offset: %w", err)
		}
		u.NextOffset = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode payments.userStarGifts#6b65b517: field users: %w", err)
		}

		if headerLen > 0 {
			u.Users = make([]UserClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode payments.userStarGifts#6b65b517: field users: %w", err)
			}
			u.Users = append(u.Users, value)
		}
	}
	return nil
}

// GetCount returns value of Count field.
func (u *PaymentsUserStarGifts) GetCount() (value int) {
	if u == nil {
		return
	}
	return u.Count
}

// GetGifts returns value of Gifts field.
func (u *PaymentsUserStarGifts) GetGifts() (value []UserStarGift) {
	if u == nil {
		return
	}
	return u.Gifts
}

// SetNextOffset sets value of NextOffset conditional field.
func (u *PaymentsUserStarGifts) SetNextOffset(value string) {
	u.Flags.Set(0)
	u.NextOffset = value
}

// GetNextOffset returns value of NextOffset conditional field and
// boolean which is true if field was set.
func (u *PaymentsUserStarGifts) GetNextOffset() (value string, ok bool) {
	if u == nil {
		return
	}
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.NextOffset, true
}

// GetUsers returns value of Users field.
func (u *PaymentsUserStarGifts) GetUsers() (value []UserClass) {
	if u == nil {
		return
	}
	return u.Users
}

// MapUsers returns field Users wrapped in UserClassArray helper.
func (u *PaymentsUserStarGifts) MapUsers() (value UserClassArray) {
	return UserClassArray(u.Users)
}
