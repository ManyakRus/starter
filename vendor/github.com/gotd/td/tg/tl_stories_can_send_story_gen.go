// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoriesCanSendStoryRequest represents TL type `stories.canSendStory#c7dfdfdd`.
//
// See https://core.telegram.org/method/stories.canSendStory for reference.
type StoriesCanSendStoryRequest struct {
	// Peer field of StoriesCanSendStoryRequest.
	Peer InputPeerClass
}

// StoriesCanSendStoryRequestTypeID is TL type id of StoriesCanSendStoryRequest.
const StoriesCanSendStoryRequestTypeID = 0xc7dfdfdd

// Ensuring interfaces in compile-time for StoriesCanSendStoryRequest.
var (
	_ bin.Encoder     = &StoriesCanSendStoryRequest{}
	_ bin.Decoder     = &StoriesCanSendStoryRequest{}
	_ bin.BareEncoder = &StoriesCanSendStoryRequest{}
	_ bin.BareDecoder = &StoriesCanSendStoryRequest{}
)

func (c *StoriesCanSendStoryRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Peer == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *StoriesCanSendStoryRequest) String() string {
	if c == nil {
		return "StoriesCanSendStoryRequest(nil)"
	}
	type Alias StoriesCanSendStoryRequest
	return fmt.Sprintf("StoriesCanSendStoryRequest%+v", Alias(*c))
}

// FillFrom fills StoriesCanSendStoryRequest from given interface.
func (c *StoriesCanSendStoryRequest) FillFrom(from interface {
	GetPeer() (value InputPeerClass)
}) {
	c.Peer = from.GetPeer()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoriesCanSendStoryRequest) TypeID() uint32 {
	return StoriesCanSendStoryRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*StoriesCanSendStoryRequest) TypeName() string {
	return "stories.canSendStory"
}

// TypeInfo returns info about TL type.
func (c *StoriesCanSendStoryRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stories.canSendStory",
		ID:   StoriesCanSendStoryRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *StoriesCanSendStoryRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode stories.canSendStory#c7dfdfdd as nil")
	}
	b.PutID(StoriesCanSendStoryRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *StoriesCanSendStoryRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode stories.canSendStory#c7dfdfdd as nil")
	}
	if c.Peer == nil {
		return fmt.Errorf("unable to encode stories.canSendStory#c7dfdfdd: field peer is nil")
	}
	if err := c.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stories.canSendStory#c7dfdfdd: field peer: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *StoriesCanSendStoryRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode stories.canSendStory#c7dfdfdd to nil")
	}
	if err := b.ConsumeID(StoriesCanSendStoryRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode stories.canSendStory#c7dfdfdd: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *StoriesCanSendStoryRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode stories.canSendStory#c7dfdfdd to nil")
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode stories.canSendStory#c7dfdfdd: field peer: %w", err)
		}
		c.Peer = value
	}
	return nil
}

// GetPeer returns value of Peer field.
func (c *StoriesCanSendStoryRequest) GetPeer() (value InputPeerClass) {
	if c == nil {
		return
	}
	return c.Peer
}

// StoriesCanSendStory invokes method stories.canSendStory#c7dfdfdd returning error if any.
//
// See https://core.telegram.org/method/stories.canSendStory for reference.
func (c *Client) StoriesCanSendStory(ctx context.Context, peer InputPeerClass) (bool, error) {
	var result BoolBox

	request := &StoriesCanSendStoryRequest{
		Peer: peer,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
