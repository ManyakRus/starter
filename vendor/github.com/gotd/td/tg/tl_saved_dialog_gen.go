// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// SavedDialog represents TL type `savedDialog#bd87cb6c`.
//
// See https://core.telegram.org/constructor/savedDialog for reference.
type SavedDialog struct {
	// Flags field of SavedDialog.
	Flags bin.Fields
	// Pinned field of SavedDialog.
	Pinned bool
	// Peer field of SavedDialog.
	Peer PeerClass
	// TopMessage field of SavedDialog.
	TopMessage int
}

// SavedDialogTypeID is TL type id of SavedDialog.
const SavedDialogTypeID = 0xbd87cb6c

// Ensuring interfaces in compile-time for SavedDialog.
var (
	_ bin.Encoder     = &SavedDialog{}
	_ bin.Decoder     = &SavedDialog{}
	_ bin.BareEncoder = &SavedDialog{}
	_ bin.BareDecoder = &SavedDialog{}
)

func (s *SavedDialog) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.Pinned == false) {
		return false
	}
	if !(s.Peer == nil) {
		return false
	}
	if !(s.TopMessage == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SavedDialog) String() string {
	if s == nil {
		return "SavedDialog(nil)"
	}
	type Alias SavedDialog
	return fmt.Sprintf("SavedDialog%+v", Alias(*s))
}

// FillFrom fills SavedDialog from given interface.
func (s *SavedDialog) FillFrom(from interface {
	GetPinned() (value bool)
	GetPeer() (value PeerClass)
	GetTopMessage() (value int)
}) {
	s.Pinned = from.GetPinned()
	s.Peer = from.GetPeer()
	s.TopMessage = from.GetTopMessage()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*SavedDialog) TypeID() uint32 {
	return SavedDialogTypeID
}

// TypeName returns name of type in TL schema.
func (*SavedDialog) TypeName() string {
	return "savedDialog"
}

// TypeInfo returns info about TL type.
func (s *SavedDialog) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "savedDialog",
		ID:   SavedDialogTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Pinned",
			SchemaName: "pinned",
			Null:       !s.Flags.Has(2),
		},
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "TopMessage",
			SchemaName: "top_message",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (s *SavedDialog) SetFlags() {
	if !(s.Pinned == false) {
		s.Flags.Set(2)
	}
}

// Encode implements bin.Encoder.
func (s *SavedDialog) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode savedDialog#bd87cb6c as nil")
	}
	b.PutID(SavedDialogTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *SavedDialog) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode savedDialog#bd87cb6c as nil")
	}
	s.SetFlags()
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode savedDialog#bd87cb6c: field flags: %w", err)
	}
	if s.Peer == nil {
		return fmt.Errorf("unable to encode savedDialog#bd87cb6c: field peer is nil")
	}
	if err := s.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode savedDialog#bd87cb6c: field peer: %w", err)
	}
	b.PutInt(s.TopMessage)
	return nil
}

// Decode implements bin.Decoder.
func (s *SavedDialog) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode savedDialog#bd87cb6c to nil")
	}
	if err := b.ConsumeID(SavedDialogTypeID); err != nil {
		return fmt.Errorf("unable to decode savedDialog#bd87cb6c: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *SavedDialog) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode savedDialog#bd87cb6c to nil")
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode savedDialog#bd87cb6c: field flags: %w", err)
		}
	}
	s.Pinned = s.Flags.Has(2)
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode savedDialog#bd87cb6c: field peer: %w", err)
		}
		s.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode savedDialog#bd87cb6c: field top_message: %w", err)
		}
		s.TopMessage = value
	}
	return nil
}

// SetPinned sets value of Pinned conditional field.
func (s *SavedDialog) SetPinned(value bool) {
	if value {
		s.Flags.Set(2)
		s.Pinned = true
	} else {
		s.Flags.Unset(2)
		s.Pinned = false
	}
}

// GetPinned returns value of Pinned conditional field.
func (s *SavedDialog) GetPinned() (value bool) {
	if s == nil {
		return
	}
	return s.Flags.Has(2)
}

// GetPeer returns value of Peer field.
func (s *SavedDialog) GetPeer() (value PeerClass) {
	if s == nil {
		return
	}
	return s.Peer
}

// GetTopMessage returns value of TopMessage field.
func (s *SavedDialog) GetTopMessage() (value int) {
	if s == nil {
		return
	}
	return s.TopMessage
}
