// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoryView represents TL type `storyView#b0bdeac5`.
//
// See https://core.telegram.org/constructor/storyView for reference.
type StoryView struct {
	// Flags field of StoryView.
	Flags bin.Fields
	// Blocked field of StoryView.
	Blocked bool
	// BlockedMyStoriesFrom field of StoryView.
	BlockedMyStoriesFrom bool
	// UserID field of StoryView.
	UserID int64
	// Date field of StoryView.
	Date int
	// Reaction field of StoryView.
	//
	// Use SetReaction and GetReaction helpers.
	Reaction ReactionClass
}

// StoryViewTypeID is TL type id of StoryView.
const StoryViewTypeID = 0xb0bdeac5

// Ensuring interfaces in compile-time for StoryView.
var (
	_ bin.Encoder     = &StoryView{}
	_ bin.Decoder     = &StoryView{}
	_ bin.BareEncoder = &StoryView{}
	_ bin.BareDecoder = &StoryView{}
)

func (s *StoryView) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.Blocked == false) {
		return false
	}
	if !(s.BlockedMyStoriesFrom == false) {
		return false
	}
	if !(s.UserID == 0) {
		return false
	}
	if !(s.Date == 0) {
		return false
	}
	if !(s.Reaction == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StoryView) String() string {
	if s == nil {
		return "StoryView(nil)"
	}
	type Alias StoryView
	return fmt.Sprintf("StoryView%+v", Alias(*s))
}

// FillFrom fills StoryView from given interface.
func (s *StoryView) FillFrom(from interface {
	GetBlocked() (value bool)
	GetBlockedMyStoriesFrom() (value bool)
	GetUserID() (value int64)
	GetDate() (value int)
	GetReaction() (value ReactionClass, ok bool)
}) {
	s.Blocked = from.GetBlocked()
	s.BlockedMyStoriesFrom = from.GetBlockedMyStoriesFrom()
	s.UserID = from.GetUserID()
	s.Date = from.GetDate()
	if val, ok := from.GetReaction(); ok {
		s.Reaction = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoryView) TypeID() uint32 {
	return StoryViewTypeID
}

// TypeName returns name of type in TL schema.
func (*StoryView) TypeName() string {
	return "storyView"
}

// TypeInfo returns info about TL type.
func (s *StoryView) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "storyView",
		ID:   StoryViewTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Blocked",
			SchemaName: "blocked",
			Null:       !s.Flags.Has(0),
		},
		{
			Name:       "BlockedMyStoriesFrom",
			SchemaName: "blocked_my_stories_from",
			Null:       !s.Flags.Has(1),
		},
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
		{
			Name:       "Reaction",
			SchemaName: "reaction",
			Null:       !s.Flags.Has(2),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (s *StoryView) SetFlags() {
	if !(s.Blocked == false) {
		s.Flags.Set(0)
	}
	if !(s.BlockedMyStoriesFrom == false) {
		s.Flags.Set(1)
	}
	if !(s.Reaction == nil) {
		s.Flags.Set(2)
	}
}

// Encode implements bin.Encoder.
func (s *StoryView) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyView#b0bdeac5 as nil")
	}
	b.PutID(StoryViewTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StoryView) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyView#b0bdeac5 as nil")
	}
	s.SetFlags()
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode storyView#b0bdeac5: field flags: %w", err)
	}
	b.PutLong(s.UserID)
	b.PutInt(s.Date)
	if s.Flags.Has(2) {
		if s.Reaction == nil {
			return fmt.Errorf("unable to encode storyView#b0bdeac5: field reaction is nil")
		}
		if err := s.Reaction.Encode(b); err != nil {
			return fmt.Errorf("unable to encode storyView#b0bdeac5: field reaction: %w", err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StoryView) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyView#b0bdeac5 to nil")
	}
	if err := b.ConsumeID(StoryViewTypeID); err != nil {
		return fmt.Errorf("unable to decode storyView#b0bdeac5: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StoryView) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyView#b0bdeac5 to nil")
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode storyView#b0bdeac5: field flags: %w", err)
		}
	}
	s.Blocked = s.Flags.Has(0)
	s.BlockedMyStoriesFrom = s.Flags.Has(1)
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode storyView#b0bdeac5: field user_id: %w", err)
		}
		s.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode storyView#b0bdeac5: field date: %w", err)
		}
		s.Date = value
	}
	if s.Flags.Has(2) {
		value, err := DecodeReaction(b)
		if err != nil {
			return fmt.Errorf("unable to decode storyView#b0bdeac5: field reaction: %w", err)
		}
		s.Reaction = value
	}
	return nil
}

// SetBlocked sets value of Blocked conditional field.
func (s *StoryView) SetBlocked(value bool) {
	if value {
		s.Flags.Set(0)
		s.Blocked = true
	} else {
		s.Flags.Unset(0)
		s.Blocked = false
	}
}

// GetBlocked returns value of Blocked conditional field.
func (s *StoryView) GetBlocked() (value bool) {
	if s == nil {
		return
	}
	return s.Flags.Has(0)
}

// SetBlockedMyStoriesFrom sets value of BlockedMyStoriesFrom conditional field.
func (s *StoryView) SetBlockedMyStoriesFrom(value bool) {
	if value {
		s.Flags.Set(1)
		s.BlockedMyStoriesFrom = true
	} else {
		s.Flags.Unset(1)
		s.BlockedMyStoriesFrom = false
	}
}

// GetBlockedMyStoriesFrom returns value of BlockedMyStoriesFrom conditional field.
func (s *StoryView) GetBlockedMyStoriesFrom() (value bool) {
	if s == nil {
		return
	}
	return s.Flags.Has(1)
}

// GetUserID returns value of UserID field.
func (s *StoryView) GetUserID() (value int64) {
	if s == nil {
		return
	}
	return s.UserID
}

// GetDate returns value of Date field.
func (s *StoryView) GetDate() (value int) {
	if s == nil {
		return
	}
	return s.Date
}

// SetReaction sets value of Reaction conditional field.
func (s *StoryView) SetReaction(value ReactionClass) {
	s.Flags.Set(2)
	s.Reaction = value
}

// GetReaction returns value of Reaction conditional field and
// boolean which is true if field was set.
func (s *StoryView) GetReaction() (value ReactionClass, ok bool) {
	if s == nil {
		return
	}
	if !s.Flags.Has(2) {
		return value, false
	}
	return s.Reaction, true
}
