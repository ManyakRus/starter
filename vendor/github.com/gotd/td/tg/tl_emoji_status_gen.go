// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// EmojiStatusEmpty represents TL type `emojiStatusEmpty#2de11aae`.
// No emoji status is set
//
// See https://core.telegram.org/constructor/emojiStatusEmpty for reference.
type EmojiStatusEmpty struct {
}

// EmojiStatusEmptyTypeID is TL type id of EmojiStatusEmpty.
const EmojiStatusEmptyTypeID = 0x2de11aae

// construct implements constructor of EmojiStatusClass.
func (e EmojiStatusEmpty) construct() EmojiStatusClass { return &e }

// Ensuring interfaces in compile-time for EmojiStatusEmpty.
var (
	_ bin.Encoder     = &EmojiStatusEmpty{}
	_ bin.Decoder     = &EmojiStatusEmpty{}
	_ bin.BareEncoder = &EmojiStatusEmpty{}
	_ bin.BareDecoder = &EmojiStatusEmpty{}

	_ EmojiStatusClass = &EmojiStatusEmpty{}
)

func (e *EmojiStatusEmpty) Zero() bool {
	if e == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (e *EmojiStatusEmpty) String() string {
	if e == nil {
		return "EmojiStatusEmpty(nil)"
	}
	type Alias EmojiStatusEmpty
	return fmt.Sprintf("EmojiStatusEmpty%+v", Alias(*e))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*EmojiStatusEmpty) TypeID() uint32 {
	return EmojiStatusEmptyTypeID
}

// TypeName returns name of type in TL schema.
func (*EmojiStatusEmpty) TypeName() string {
	return "emojiStatusEmpty"
}

// TypeInfo returns info about TL type.
func (e *EmojiStatusEmpty) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "emojiStatusEmpty",
		ID:   EmojiStatusEmptyTypeID,
	}
	if e == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (e *EmojiStatusEmpty) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode emojiStatusEmpty#2de11aae as nil")
	}
	b.PutID(EmojiStatusEmptyTypeID)
	return e.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (e *EmojiStatusEmpty) EncodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode emojiStatusEmpty#2de11aae as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (e *EmojiStatusEmpty) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode emojiStatusEmpty#2de11aae to nil")
	}
	if err := b.ConsumeID(EmojiStatusEmptyTypeID); err != nil {
		return fmt.Errorf("unable to decode emojiStatusEmpty#2de11aae: %w", err)
	}
	return e.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (e *EmojiStatusEmpty) DecodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode emojiStatusEmpty#2de11aae to nil")
	}
	return nil
}

// EmojiStatus represents TL type `emojiStatus#929b619d`.
// An emoji status¹
//
// Links:
//  1. https://core.telegram.org/api/emoji-status
//
// See https://core.telegram.org/constructor/emojiStatus for reference.
type EmojiStatus struct {
	// Custom emoji document ID¹
	//
	// Links:
	//  1) https://core.telegram.org/api/custom-emoji
	DocumentID int64
}

// EmojiStatusTypeID is TL type id of EmojiStatus.
const EmojiStatusTypeID = 0x929b619d

// construct implements constructor of EmojiStatusClass.
func (e EmojiStatus) construct() EmojiStatusClass { return &e }

// Ensuring interfaces in compile-time for EmojiStatus.
var (
	_ bin.Encoder     = &EmojiStatus{}
	_ bin.Decoder     = &EmojiStatus{}
	_ bin.BareEncoder = &EmojiStatus{}
	_ bin.BareDecoder = &EmojiStatus{}

	_ EmojiStatusClass = &EmojiStatus{}
)

func (e *EmojiStatus) Zero() bool {
	if e == nil {
		return true
	}
	if !(e.DocumentID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (e *EmojiStatus) String() string {
	if e == nil {
		return "EmojiStatus(nil)"
	}
	type Alias EmojiStatus
	return fmt.Sprintf("EmojiStatus%+v", Alias(*e))
}

// FillFrom fills EmojiStatus from given interface.
func (e *EmojiStatus) FillFrom(from interface {
	GetDocumentID() (value int64)
}) {
	e.DocumentID = from.GetDocumentID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*EmojiStatus) TypeID() uint32 {
	return EmojiStatusTypeID
}

// TypeName returns name of type in TL schema.
func (*EmojiStatus) TypeName() string {
	return "emojiStatus"
}

// TypeInfo returns info about TL type.
func (e *EmojiStatus) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "emojiStatus",
		ID:   EmojiStatusTypeID,
	}
	if e == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "DocumentID",
			SchemaName: "document_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (e *EmojiStatus) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode emojiStatus#929b619d as nil")
	}
	b.PutID(EmojiStatusTypeID)
	return e.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (e *EmojiStatus) EncodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode emojiStatus#929b619d as nil")
	}
	b.PutLong(e.DocumentID)
	return nil
}

// Decode implements bin.Decoder.
func (e *EmojiStatus) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode emojiStatus#929b619d to nil")
	}
	if err := b.ConsumeID(EmojiStatusTypeID); err != nil {
		return fmt.Errorf("unable to decode emojiStatus#929b619d: %w", err)
	}
	return e.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (e *EmojiStatus) DecodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode emojiStatus#929b619d to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode emojiStatus#929b619d: field document_id: %w", err)
		}
		e.DocumentID = value
	}
	return nil
}

// GetDocumentID returns value of DocumentID field.
func (e *EmojiStatus) GetDocumentID() (value int64) {
	if e == nil {
		return
	}
	return e.DocumentID
}

// EmojiStatusUntil represents TL type `emojiStatusUntil#fa30a8c7`.
// An emoji status¹ valid until the specified date
//
// Links:
//  1. https://core.telegram.org/api/emoji-status
//
// See https://core.telegram.org/constructor/emojiStatusUntil for reference.
type EmojiStatusUntil struct {
	// Custom emoji document ID¹
	//
	// Links:
	//  1) https://core.telegram.org/api/custom-emoji
	DocumentID int64
	// This status is valid until this date
	Until int
}

// EmojiStatusUntilTypeID is TL type id of EmojiStatusUntil.
const EmojiStatusUntilTypeID = 0xfa30a8c7

// construct implements constructor of EmojiStatusClass.
func (e EmojiStatusUntil) construct() EmojiStatusClass { return &e }

// Ensuring interfaces in compile-time for EmojiStatusUntil.
var (
	_ bin.Encoder     = &EmojiStatusUntil{}
	_ bin.Decoder     = &EmojiStatusUntil{}
	_ bin.BareEncoder = &EmojiStatusUntil{}
	_ bin.BareDecoder = &EmojiStatusUntil{}

	_ EmojiStatusClass = &EmojiStatusUntil{}
)

func (e *EmojiStatusUntil) Zero() bool {
	if e == nil {
		return true
	}
	if !(e.DocumentID == 0) {
		return false
	}
	if !(e.Until == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (e *EmojiStatusUntil) String() string {
	if e == nil {
		return "EmojiStatusUntil(nil)"
	}
	type Alias EmojiStatusUntil
	return fmt.Sprintf("EmojiStatusUntil%+v", Alias(*e))
}

// FillFrom fills EmojiStatusUntil from given interface.
func (e *EmojiStatusUntil) FillFrom(from interface {
	GetDocumentID() (value int64)
	GetUntil() (value int)
}) {
	e.DocumentID = from.GetDocumentID()
	e.Until = from.GetUntil()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*EmojiStatusUntil) TypeID() uint32 {
	return EmojiStatusUntilTypeID
}

// TypeName returns name of type in TL schema.
func (*EmojiStatusUntil) TypeName() string {
	return "emojiStatusUntil"
}

// TypeInfo returns info about TL type.
func (e *EmojiStatusUntil) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "emojiStatusUntil",
		ID:   EmojiStatusUntilTypeID,
	}
	if e == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "DocumentID",
			SchemaName: "document_id",
		},
		{
			Name:       "Until",
			SchemaName: "until",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (e *EmojiStatusUntil) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode emojiStatusUntil#fa30a8c7 as nil")
	}
	b.PutID(EmojiStatusUntilTypeID)
	return e.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (e *EmojiStatusUntil) EncodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode emojiStatusUntil#fa30a8c7 as nil")
	}
	b.PutLong(e.DocumentID)
	b.PutInt(e.Until)
	return nil
}

// Decode implements bin.Decoder.
func (e *EmojiStatusUntil) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode emojiStatusUntil#fa30a8c7 to nil")
	}
	if err := b.ConsumeID(EmojiStatusUntilTypeID); err != nil {
		return fmt.Errorf("unable to decode emojiStatusUntil#fa30a8c7: %w", err)
	}
	return e.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (e *EmojiStatusUntil) DecodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode emojiStatusUntil#fa30a8c7 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode emojiStatusUntil#fa30a8c7: field document_id: %w", err)
		}
		e.DocumentID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode emojiStatusUntil#fa30a8c7: field until: %w", err)
		}
		e.Until = value
	}
	return nil
}

// GetDocumentID returns value of DocumentID field.
func (e *EmojiStatusUntil) GetDocumentID() (value int64) {
	if e == nil {
		return
	}
	return e.DocumentID
}

// GetUntil returns value of Until field.
func (e *EmojiStatusUntil) GetUntil() (value int) {
	if e == nil {
		return
	}
	return e.Until
}

// EmojiStatusClassName is schema name of EmojiStatusClass.
const EmojiStatusClassName = "EmojiStatus"

// EmojiStatusClass represents EmojiStatus generic type.
//
// See https://core.telegram.org/type/EmojiStatus for reference.
//
// Example:
//
//	g, err := tg.DecodeEmojiStatus(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tg.EmojiStatusEmpty: // emojiStatusEmpty#2de11aae
//	case *tg.EmojiStatus: // emojiStatus#929b619d
//	case *tg.EmojiStatusUntil: // emojiStatusUntil#fa30a8c7
//	default: panic(v)
//	}
type EmojiStatusClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() EmojiStatusClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	// AsNotEmpty tries to map EmojiStatusClass to NotEmptyEmojiStatus.
	AsNotEmpty() (NotEmptyEmojiStatus, bool)
}

// NotEmptyEmojiStatus represents NotEmpty subset of EmojiStatusClass.
type NotEmptyEmojiStatus interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() EmojiStatusClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	// Custom emoji document ID¹
	//
	// Links:
	//  1) https://core.telegram.org/api/custom-emoji
	GetDocumentID() (value int64)
}

// AsNotEmpty tries to map EmojiStatusEmpty to NotEmptyEmojiStatus.
func (e *EmojiStatusEmpty) AsNotEmpty() (NotEmptyEmojiStatus, bool) {
	value, ok := (EmojiStatusClass(e)).(NotEmptyEmojiStatus)
	return value, ok
}

// AsNotEmpty tries to map EmojiStatus to NotEmptyEmojiStatus.
func (e *EmojiStatus) AsNotEmpty() (NotEmptyEmojiStatus, bool) {
	value, ok := (EmojiStatusClass(e)).(NotEmptyEmojiStatus)
	return value, ok
}

// AsNotEmpty tries to map EmojiStatusUntil to NotEmptyEmojiStatus.
func (e *EmojiStatusUntil) AsNotEmpty() (NotEmptyEmojiStatus, bool) {
	value, ok := (EmojiStatusClass(e)).(NotEmptyEmojiStatus)
	return value, ok
}

// DecodeEmojiStatus implements binary de-serialization for EmojiStatusClass.
func DecodeEmojiStatus(buf *bin.Buffer) (EmojiStatusClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case EmojiStatusEmptyTypeID:
		// Decoding emojiStatusEmpty#2de11aae.
		v := EmojiStatusEmpty{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode EmojiStatusClass: %w", err)
		}
		return &v, nil
	case EmojiStatusTypeID:
		// Decoding emojiStatus#929b619d.
		v := EmojiStatus{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode EmojiStatusClass: %w", err)
		}
		return &v, nil
	case EmojiStatusUntilTypeID:
		// Decoding emojiStatusUntil#fa30a8c7.
		v := EmojiStatusUntil{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode EmojiStatusClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode EmojiStatusClass: %w", bin.NewUnexpectedID(id))
	}
}

// EmojiStatus boxes the EmojiStatusClass providing a helper.
type EmojiStatusBox struct {
	EmojiStatus EmojiStatusClass
}

// Decode implements bin.Decoder for EmojiStatusBox.
func (b *EmojiStatusBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode EmojiStatusBox to nil")
	}
	v, err := DecodeEmojiStatus(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.EmojiStatus = v
	return nil
}

// Encode implements bin.Encode for EmojiStatusBox.
func (b *EmojiStatusBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.EmojiStatus == nil {
		return fmt.Errorf("unable to encode EmojiStatusClass as nil")
	}
	return b.EmojiStatus.Encode(buf)
}
