// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChannelsUpdateColorRequest represents TL type `channels.updateColor#621a201f`.
//
// See https://core.telegram.org/method/channels.updateColor for reference.
type ChannelsUpdateColorRequest struct {
	// Flags field of ChannelsUpdateColorRequest.
	Flags bin.Fields
	// Channel field of ChannelsUpdateColorRequest.
	Channel InputChannelClass
	// Color field of ChannelsUpdateColorRequest.
	Color int
	// BackgroundEmojiID field of ChannelsUpdateColorRequest.
	//
	// Use SetBackgroundEmojiID and GetBackgroundEmojiID helpers.
	BackgroundEmojiID int64
}

// ChannelsUpdateColorRequestTypeID is TL type id of ChannelsUpdateColorRequest.
const ChannelsUpdateColorRequestTypeID = 0x621a201f

// Ensuring interfaces in compile-time for ChannelsUpdateColorRequest.
var (
	_ bin.Encoder     = &ChannelsUpdateColorRequest{}
	_ bin.Decoder     = &ChannelsUpdateColorRequest{}
	_ bin.BareEncoder = &ChannelsUpdateColorRequest{}
	_ bin.BareDecoder = &ChannelsUpdateColorRequest{}
)

func (u *ChannelsUpdateColorRequest) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Flags.Zero()) {
		return false
	}
	if !(u.Channel == nil) {
		return false
	}
	if !(u.Color == 0) {
		return false
	}
	if !(u.BackgroundEmojiID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *ChannelsUpdateColorRequest) String() string {
	if u == nil {
		return "ChannelsUpdateColorRequest(nil)"
	}
	type Alias ChannelsUpdateColorRequest
	return fmt.Sprintf("ChannelsUpdateColorRequest%+v", Alias(*u))
}

// FillFrom fills ChannelsUpdateColorRequest from given interface.
func (u *ChannelsUpdateColorRequest) FillFrom(from interface {
	GetChannel() (value InputChannelClass)
	GetColor() (value int)
	GetBackgroundEmojiID() (value int64, ok bool)
}) {
	u.Channel = from.GetChannel()
	u.Color = from.GetColor()
	if val, ok := from.GetBackgroundEmojiID(); ok {
		u.BackgroundEmojiID = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChannelsUpdateColorRequest) TypeID() uint32 {
	return ChannelsUpdateColorRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ChannelsUpdateColorRequest) TypeName() string {
	return "channels.updateColor"
}

// TypeInfo returns info about TL type.
func (u *ChannelsUpdateColorRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "channels.updateColor",
		ID:   ChannelsUpdateColorRequestTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Channel",
			SchemaName: "channel",
		},
		{
			Name:       "Color",
			SchemaName: "color",
		},
		{
			Name:       "BackgroundEmojiID",
			SchemaName: "background_emoji_id",
			Null:       !u.Flags.Has(0),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (u *ChannelsUpdateColorRequest) SetFlags() {
	if !(u.BackgroundEmojiID == 0) {
		u.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (u *ChannelsUpdateColorRequest) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode channels.updateColor#621a201f as nil")
	}
	b.PutID(ChannelsUpdateColorRequestTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *ChannelsUpdateColorRequest) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode channels.updateColor#621a201f as nil")
	}
	u.SetFlags()
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.updateColor#621a201f: field flags: %w", err)
	}
	if u.Channel == nil {
		return fmt.Errorf("unable to encode channels.updateColor#621a201f: field channel is nil")
	}
	if err := u.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.updateColor#621a201f: field channel: %w", err)
	}
	b.PutInt(u.Color)
	if u.Flags.Has(0) {
		b.PutLong(u.BackgroundEmojiID)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *ChannelsUpdateColorRequest) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode channels.updateColor#621a201f to nil")
	}
	if err := b.ConsumeID(ChannelsUpdateColorRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.updateColor#621a201f: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *ChannelsUpdateColorRequest) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode channels.updateColor#621a201f to nil")
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channels.updateColor#621a201f: field flags: %w", err)
		}
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.updateColor#621a201f: field channel: %w", err)
		}
		u.Channel = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channels.updateColor#621a201f: field color: %w", err)
		}
		u.Color = value
	}
	if u.Flags.Has(0) {
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode channels.updateColor#621a201f: field background_emoji_id: %w", err)
		}
		u.BackgroundEmojiID = value
	}
	return nil
}

// GetChannel returns value of Channel field.
func (u *ChannelsUpdateColorRequest) GetChannel() (value InputChannelClass) {
	if u == nil {
		return
	}
	return u.Channel
}

// GetColor returns value of Color field.
func (u *ChannelsUpdateColorRequest) GetColor() (value int) {
	if u == nil {
		return
	}
	return u.Color
}

// SetBackgroundEmojiID sets value of BackgroundEmojiID conditional field.
func (u *ChannelsUpdateColorRequest) SetBackgroundEmojiID(value int64) {
	u.Flags.Set(0)
	u.BackgroundEmojiID = value
}

// GetBackgroundEmojiID returns value of BackgroundEmojiID conditional field and
// boolean which is true if field was set.
func (u *ChannelsUpdateColorRequest) GetBackgroundEmojiID() (value int64, ok bool) {
	if u == nil {
		return
	}
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.BackgroundEmojiID, true
}

// GetChannelAsNotEmpty returns mapped value of Channel field.
func (u *ChannelsUpdateColorRequest) GetChannelAsNotEmpty() (NotEmptyInputChannel, bool) {
	return u.Channel.AsNotEmpty()
}

// ChannelsUpdateColor invokes method channels.updateColor#621a201f returning error if any.
//
// See https://core.telegram.org/method/channels.updateColor for reference.
func (c *Client) ChannelsUpdateColor(ctx context.Context, request *ChannelsUpdateColorRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
