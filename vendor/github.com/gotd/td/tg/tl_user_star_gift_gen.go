// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// UserStarGift represents TL type `userStarGift#eea49a6e`.
// Represents a gift¹, displayed on a user's profile page.
//
// Links:
//  1. https://core.telegram.org/api/gifts
//
// See https://core.telegram.org/constructor/userStarGift for reference.
type UserStarGift struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// If set, from_id will not be visible to users (it will still be visible to the receiver
	// of the gift).
	NameHidden bool
	// If set, indicates this is a gift sent by from_id, received by the current user and
	// currently hidden from our profile page.
	Unsaved bool
	// Sender of the gift (may be empty for anonymous senders; will always be set if this
	// gift was sent to us).
	//
	// Use SetFromID and GetFromID helpers.
	FromID int64
	// When was this gift sent.
	Date int
	// The gift.
	Gift StarGift
	// Message attached to the gift by the sender.
	//
	// Use SetMessage and GetMessage helpers.
	Message TextWithEntities
	// Only visible to the receiver of the gift, contains the ID of the messageService¹ with
	// the messageActionStarGift² in the chat with from_id.
	//
	// Links:
	//  1) https://core.telegram.org/constructor/messageService
	//  2) https://core.telegram.org/constructor/messageActionStarGift
	//
	// Use SetMsgID and GetMsgID helpers.
	MsgID int
	// The receiver of this gift may convert it to this many Telegram Stars, instead of
	// displaying it on their profile page.convert_stars will be equal to the buying price of
	// the gift only if the gift was bought using recently bought Telegram Stars, otherwise
	// it will be less than stars.
	//
	// Use SetConvertStars and GetConvertStars helpers.
	ConvertStars int64
}

// UserStarGiftTypeID is TL type id of UserStarGift.
const UserStarGiftTypeID = 0xeea49a6e

// Ensuring interfaces in compile-time for UserStarGift.
var (
	_ bin.Encoder     = &UserStarGift{}
	_ bin.Decoder     = &UserStarGift{}
	_ bin.BareEncoder = &UserStarGift{}
	_ bin.BareDecoder = &UserStarGift{}
)

func (u *UserStarGift) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Flags.Zero()) {
		return false
	}
	if !(u.NameHidden == false) {
		return false
	}
	if !(u.Unsaved == false) {
		return false
	}
	if !(u.FromID == 0) {
		return false
	}
	if !(u.Date == 0) {
		return false
	}
	if !(u.Gift.Zero()) {
		return false
	}
	if !(u.Message.Zero()) {
		return false
	}
	if !(u.MsgID == 0) {
		return false
	}
	if !(u.ConvertStars == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *UserStarGift) String() string {
	if u == nil {
		return "UserStarGift(nil)"
	}
	type Alias UserStarGift
	return fmt.Sprintf("UserStarGift%+v", Alias(*u))
}

// FillFrom fills UserStarGift from given interface.
func (u *UserStarGift) FillFrom(from interface {
	GetNameHidden() (value bool)
	GetUnsaved() (value bool)
	GetFromID() (value int64, ok bool)
	GetDate() (value int)
	GetGift() (value StarGift)
	GetMessage() (value TextWithEntities, ok bool)
	GetMsgID() (value int, ok bool)
	GetConvertStars() (value int64, ok bool)
}) {
	u.NameHidden = from.GetNameHidden()
	u.Unsaved = from.GetUnsaved()
	if val, ok := from.GetFromID(); ok {
		u.FromID = val
	}

	u.Date = from.GetDate()
	u.Gift = from.GetGift()
	if val, ok := from.GetMessage(); ok {
		u.Message = val
	}

	if val, ok := from.GetMsgID(); ok {
		u.MsgID = val
	}

	if val, ok := from.GetConvertStars(); ok {
		u.ConvertStars = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*UserStarGift) TypeID() uint32 {
	return UserStarGiftTypeID
}

// TypeName returns name of type in TL schema.
func (*UserStarGift) TypeName() string {
	return "userStarGift"
}

// TypeInfo returns info about TL type.
func (u *UserStarGift) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "userStarGift",
		ID:   UserStarGiftTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "NameHidden",
			SchemaName: "name_hidden",
			Null:       !u.Flags.Has(0),
		},
		{
			Name:       "Unsaved",
			SchemaName: "unsaved",
			Null:       !u.Flags.Has(5),
		},
		{
			Name:       "FromID",
			SchemaName: "from_id",
			Null:       !u.Flags.Has(1),
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
		{
			Name:       "Gift",
			SchemaName: "gift",
		},
		{
			Name:       "Message",
			SchemaName: "message",
			Null:       !u.Flags.Has(2),
		},
		{
			Name:       "MsgID",
			SchemaName: "msg_id",
			Null:       !u.Flags.Has(3),
		},
		{
			Name:       "ConvertStars",
			SchemaName: "convert_stars",
			Null:       !u.Flags.Has(4),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (u *UserStarGift) SetFlags() {
	if !(u.NameHidden == false) {
		u.Flags.Set(0)
	}
	if !(u.Unsaved == false) {
		u.Flags.Set(5)
	}
	if !(u.FromID == 0) {
		u.Flags.Set(1)
	}
	if !(u.Message.Zero()) {
		u.Flags.Set(2)
	}
	if !(u.MsgID == 0) {
		u.Flags.Set(3)
	}
	if !(u.ConvertStars == 0) {
		u.Flags.Set(4)
	}
}

// Encode implements bin.Encoder.
func (u *UserStarGift) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userStarGift#eea49a6e as nil")
	}
	b.PutID(UserStarGiftTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *UserStarGift) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userStarGift#eea49a6e as nil")
	}
	u.SetFlags()
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode userStarGift#eea49a6e: field flags: %w", err)
	}
	if u.Flags.Has(1) {
		b.PutLong(u.FromID)
	}
	b.PutInt(u.Date)
	if err := u.Gift.Encode(b); err != nil {
		return fmt.Errorf("unable to encode userStarGift#eea49a6e: field gift: %w", err)
	}
	if u.Flags.Has(2) {
		if err := u.Message.Encode(b); err != nil {
			return fmt.Errorf("unable to encode userStarGift#eea49a6e: field message: %w", err)
		}
	}
	if u.Flags.Has(3) {
		b.PutInt(u.MsgID)
	}
	if u.Flags.Has(4) {
		b.PutLong(u.ConvertStars)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UserStarGift) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userStarGift#eea49a6e to nil")
	}
	if err := b.ConsumeID(UserStarGiftTypeID); err != nil {
		return fmt.Errorf("unable to decode userStarGift#eea49a6e: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *UserStarGift) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userStarGift#eea49a6e to nil")
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode userStarGift#eea49a6e: field flags: %w", err)
		}
	}
	u.NameHidden = u.Flags.Has(0)
	u.Unsaved = u.Flags.Has(5)
	if u.Flags.Has(1) {
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode userStarGift#eea49a6e: field from_id: %w", err)
		}
		u.FromID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode userStarGift#eea49a6e: field date: %w", err)
		}
		u.Date = value
	}
	{
		if err := u.Gift.Decode(b); err != nil {
			return fmt.Errorf("unable to decode userStarGift#eea49a6e: field gift: %w", err)
		}
	}
	if u.Flags.Has(2) {
		if err := u.Message.Decode(b); err != nil {
			return fmt.Errorf("unable to decode userStarGift#eea49a6e: field message: %w", err)
		}
	}
	if u.Flags.Has(3) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode userStarGift#eea49a6e: field msg_id: %w", err)
		}
		u.MsgID = value
	}
	if u.Flags.Has(4) {
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode userStarGift#eea49a6e: field convert_stars: %w", err)
		}
		u.ConvertStars = value
	}
	return nil
}

// SetNameHidden sets value of NameHidden conditional field.
func (u *UserStarGift) SetNameHidden(value bool) {
	if value {
		u.Flags.Set(0)
		u.NameHidden = true
	} else {
		u.Flags.Unset(0)
		u.NameHidden = false
	}
}

// GetNameHidden returns value of NameHidden conditional field.
func (u *UserStarGift) GetNameHidden() (value bool) {
	if u == nil {
		return
	}
	return u.Flags.Has(0)
}

// SetUnsaved sets value of Unsaved conditional field.
func (u *UserStarGift) SetUnsaved(value bool) {
	if value {
		u.Flags.Set(5)
		u.Unsaved = true
	} else {
		u.Flags.Unset(5)
		u.Unsaved = false
	}
}

// GetUnsaved returns value of Unsaved conditional field.
func (u *UserStarGift) GetUnsaved() (value bool) {
	if u == nil {
		return
	}
	return u.Flags.Has(5)
}

// SetFromID sets value of FromID conditional field.
func (u *UserStarGift) SetFromID(value int64) {
	u.Flags.Set(1)
	u.FromID = value
}

// GetFromID returns value of FromID conditional field and
// boolean which is true if field was set.
func (u *UserStarGift) GetFromID() (value int64, ok bool) {
	if u == nil {
		return
	}
	if !u.Flags.Has(1) {
		return value, false
	}
	return u.FromID, true
}

// GetDate returns value of Date field.
func (u *UserStarGift) GetDate() (value int) {
	if u == nil {
		return
	}
	return u.Date
}

// GetGift returns value of Gift field.
func (u *UserStarGift) GetGift() (value StarGift) {
	if u == nil {
		return
	}
	return u.Gift
}

// SetMessage sets value of Message conditional field.
func (u *UserStarGift) SetMessage(value TextWithEntities) {
	u.Flags.Set(2)
	u.Message = value
}

// GetMessage returns value of Message conditional field and
// boolean which is true if field was set.
func (u *UserStarGift) GetMessage() (value TextWithEntities, ok bool) {
	if u == nil {
		return
	}
	if !u.Flags.Has(2) {
		return value, false
	}
	return u.Message, true
}

// SetMsgID sets value of MsgID conditional field.
func (u *UserStarGift) SetMsgID(value int) {
	u.Flags.Set(3)
	u.MsgID = value
}

// GetMsgID returns value of MsgID conditional field and
// boolean which is true if field was set.
func (u *UserStarGift) GetMsgID() (value int, ok bool) {
	if u == nil {
		return
	}
	if !u.Flags.Has(3) {
		return value, false
	}
	return u.MsgID, true
}

// SetConvertStars sets value of ConvertStars conditional field.
func (u *UserStarGift) SetConvertStars(value int64) {
	u.Flags.Set(4)
	u.ConvertStars = value
}

// GetConvertStars returns value of ConvertStars conditional field and
// boolean which is true if field was set.
func (u *UserStarGift) GetConvertStars() (value int64, ok bool) {
	if u == nil {
		return
	}
	if !u.Flags.Has(4) {
		return value, false
	}
	return u.ConvertStars, true
}
