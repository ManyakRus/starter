// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// BotBusinessConnection represents TL type `botBusinessConnection#896433b4`.
//
// See https://core.telegram.org/constructor/botBusinessConnection for reference.
type BotBusinessConnection struct {
	// Flags field of BotBusinessConnection.
	Flags bin.Fields
	// CanReply field of BotBusinessConnection.
	CanReply bool
	// Disabled field of BotBusinessConnection.
	Disabled bool
	// ConnectionID field of BotBusinessConnection.
	ConnectionID string
	// UserID field of BotBusinessConnection.
	UserID int64
	// DCID field of BotBusinessConnection.
	DCID int
	// Date field of BotBusinessConnection.
	Date int
}

// BotBusinessConnectionTypeID is TL type id of BotBusinessConnection.
const BotBusinessConnectionTypeID = 0x896433b4

// Ensuring interfaces in compile-time for BotBusinessConnection.
var (
	_ bin.Encoder     = &BotBusinessConnection{}
	_ bin.Decoder     = &BotBusinessConnection{}
	_ bin.BareEncoder = &BotBusinessConnection{}
	_ bin.BareDecoder = &BotBusinessConnection{}
)

func (b *BotBusinessConnection) Zero() bool {
	if b == nil {
		return true
	}
	if !(b.Flags.Zero()) {
		return false
	}
	if !(b.CanReply == false) {
		return false
	}
	if !(b.Disabled == false) {
		return false
	}
	if !(b.ConnectionID == "") {
		return false
	}
	if !(b.UserID == 0) {
		return false
	}
	if !(b.DCID == 0) {
		return false
	}
	if !(b.Date == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (b *BotBusinessConnection) String() string {
	if b == nil {
		return "BotBusinessConnection(nil)"
	}
	type Alias BotBusinessConnection
	return fmt.Sprintf("BotBusinessConnection%+v", Alias(*b))
}

// FillFrom fills BotBusinessConnection from given interface.
func (b *BotBusinessConnection) FillFrom(from interface {
	GetCanReply() (value bool)
	GetDisabled() (value bool)
	GetConnectionID() (value string)
	GetUserID() (value int64)
	GetDCID() (value int)
	GetDate() (value int)
}) {
	b.CanReply = from.GetCanReply()
	b.Disabled = from.GetDisabled()
	b.ConnectionID = from.GetConnectionID()
	b.UserID = from.GetUserID()
	b.DCID = from.GetDCID()
	b.Date = from.GetDate()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*BotBusinessConnection) TypeID() uint32 {
	return BotBusinessConnectionTypeID
}

// TypeName returns name of type in TL schema.
func (*BotBusinessConnection) TypeName() string {
	return "botBusinessConnection"
}

// TypeInfo returns info about TL type.
func (b *BotBusinessConnection) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "botBusinessConnection",
		ID:   BotBusinessConnectionTypeID,
	}
	if b == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "CanReply",
			SchemaName: "can_reply",
			Null:       !b.Flags.Has(0),
		},
		{
			Name:       "Disabled",
			SchemaName: "disabled",
			Null:       !b.Flags.Has(1),
		},
		{
			Name:       "ConnectionID",
			SchemaName: "connection_id",
		},
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "DCID",
			SchemaName: "dc_id",
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (b *BotBusinessConnection) SetFlags() {
	if !(b.CanReply == false) {
		b.Flags.Set(0)
	}
	if !(b.Disabled == false) {
		b.Flags.Set(1)
	}
}

// Encode implements bin.Encoder.
func (b *BotBusinessConnection) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode botBusinessConnection#896433b4 as nil")
	}
	buf.PutID(BotBusinessConnectionTypeID)
	return b.EncodeBare(buf)
}

// EncodeBare implements bin.BareEncoder.
func (b *BotBusinessConnection) EncodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode botBusinessConnection#896433b4 as nil")
	}
	b.SetFlags()
	if err := b.Flags.Encode(buf); err != nil {
		return fmt.Errorf("unable to encode botBusinessConnection#896433b4: field flags: %w", err)
	}
	buf.PutString(b.ConnectionID)
	buf.PutLong(b.UserID)
	buf.PutInt(b.DCID)
	buf.PutInt(b.Date)
	return nil
}

// Decode implements bin.Decoder.
func (b *BotBusinessConnection) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode botBusinessConnection#896433b4 to nil")
	}
	if err := buf.ConsumeID(BotBusinessConnectionTypeID); err != nil {
		return fmt.Errorf("unable to decode botBusinessConnection#896433b4: %w", err)
	}
	return b.DecodeBare(buf)
}

// DecodeBare implements bin.BareDecoder.
func (b *BotBusinessConnection) DecodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode botBusinessConnection#896433b4 to nil")
	}
	{
		if err := b.Flags.Decode(buf); err != nil {
			return fmt.Errorf("unable to decode botBusinessConnection#896433b4: field flags: %w", err)
		}
	}
	b.CanReply = b.Flags.Has(0)
	b.Disabled = b.Flags.Has(1)
	{
		value, err := buf.String()
		if err != nil {
			return fmt.Errorf("unable to decode botBusinessConnection#896433b4: field connection_id: %w", err)
		}
		b.ConnectionID = value
	}
	{
		value, err := buf.Long()
		if err != nil {
			return fmt.Errorf("unable to decode botBusinessConnection#896433b4: field user_id: %w", err)
		}
		b.UserID = value
	}
	{
		value, err := buf.Int()
		if err != nil {
			return fmt.Errorf("unable to decode botBusinessConnection#896433b4: field dc_id: %w", err)
		}
		b.DCID = value
	}
	{
		value, err := buf.Int()
		if err != nil {
			return fmt.Errorf("unable to decode botBusinessConnection#896433b4: field date: %w", err)
		}
		b.Date = value
	}
	return nil
}

// SetCanReply sets value of CanReply conditional field.
func (b *BotBusinessConnection) SetCanReply(value bool) {
	if value {
		b.Flags.Set(0)
		b.CanReply = true
	} else {
		b.Flags.Unset(0)
		b.CanReply = false
	}
}

// GetCanReply returns value of CanReply conditional field.
func (b *BotBusinessConnection) GetCanReply() (value bool) {
	if b == nil {
		return
	}
	return b.Flags.Has(0)
}

// SetDisabled sets value of Disabled conditional field.
func (b *BotBusinessConnection) SetDisabled(value bool) {
	if value {
		b.Flags.Set(1)
		b.Disabled = true
	} else {
		b.Flags.Unset(1)
		b.Disabled = false
	}
}

// GetDisabled returns value of Disabled conditional field.
func (b *BotBusinessConnection) GetDisabled() (value bool) {
	if b == nil {
		return
	}
	return b.Flags.Has(1)
}

// GetConnectionID returns value of ConnectionID field.
func (b *BotBusinessConnection) GetConnectionID() (value string) {
	if b == nil {
		return
	}
	return b.ConnectionID
}

// GetUserID returns value of UserID field.
func (b *BotBusinessConnection) GetUserID() (value int64) {
	if b == nil {
		return
	}
	return b.UserID
}

// GetDCID returns value of DCID field.
func (b *BotBusinessConnection) GetDCID() (value int) {
	if b == nil {
		return
	}
	return b.DCID
}

// GetDate returns value of Date field.
func (b *BotBusinessConnection) GetDate() (value int) {
	if b == nil {
		return
	}
	return b.Date
}
