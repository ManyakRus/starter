// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessagesGetSavedDialogsRequest represents TL type `messages.getSavedDialogs#5381d21a`.
//
// See https://core.telegram.org/method/messages.getSavedDialogs for reference.
type MessagesGetSavedDialogsRequest struct {
	// Flags field of MessagesGetSavedDialogsRequest.
	Flags bin.Fields
	// ExcludePinned field of MessagesGetSavedDialogsRequest.
	ExcludePinned bool
	// OffsetDate field of MessagesGetSavedDialogsRequest.
	OffsetDate int
	// OffsetID field of MessagesGetSavedDialogsRequest.
	OffsetID int
	// OffsetPeer field of MessagesGetSavedDialogsRequest.
	OffsetPeer InputPeerClass
	// Limit field of MessagesGetSavedDialogsRequest.
	Limit int
	// Hash field of MessagesGetSavedDialogsRequest.
	Hash int64
}

// MessagesGetSavedDialogsRequestTypeID is TL type id of MessagesGetSavedDialogsRequest.
const MessagesGetSavedDialogsRequestTypeID = 0x5381d21a

// Ensuring interfaces in compile-time for MessagesGetSavedDialogsRequest.
var (
	_ bin.Encoder     = &MessagesGetSavedDialogsRequest{}
	_ bin.Decoder     = &MessagesGetSavedDialogsRequest{}
	_ bin.BareEncoder = &MessagesGetSavedDialogsRequest{}
	_ bin.BareDecoder = &MessagesGetSavedDialogsRequest{}
)

func (g *MessagesGetSavedDialogsRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Flags.Zero()) {
		return false
	}
	if !(g.ExcludePinned == false) {
		return false
	}
	if !(g.OffsetDate == 0) {
		return false
	}
	if !(g.OffsetID == 0) {
		return false
	}
	if !(g.OffsetPeer == nil) {
		return false
	}
	if !(g.Limit == 0) {
		return false
	}
	if !(g.Hash == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *MessagesGetSavedDialogsRequest) String() string {
	if g == nil {
		return "MessagesGetSavedDialogsRequest(nil)"
	}
	type Alias MessagesGetSavedDialogsRequest
	return fmt.Sprintf("MessagesGetSavedDialogsRequest%+v", Alias(*g))
}

// FillFrom fills MessagesGetSavedDialogsRequest from given interface.
func (g *MessagesGetSavedDialogsRequest) FillFrom(from interface {
	GetExcludePinned() (value bool)
	GetOffsetDate() (value int)
	GetOffsetID() (value int)
	GetOffsetPeer() (value InputPeerClass)
	GetLimit() (value int)
	GetHash() (value int64)
}) {
	g.ExcludePinned = from.GetExcludePinned()
	g.OffsetDate = from.GetOffsetDate()
	g.OffsetID = from.GetOffsetID()
	g.OffsetPeer = from.GetOffsetPeer()
	g.Limit = from.GetLimit()
	g.Hash = from.GetHash()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesGetSavedDialogsRequest) TypeID() uint32 {
	return MessagesGetSavedDialogsRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesGetSavedDialogsRequest) TypeName() string {
	return "messages.getSavedDialogs"
}

// TypeInfo returns info about TL type.
func (g *MessagesGetSavedDialogsRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.getSavedDialogs",
		ID:   MessagesGetSavedDialogsRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ExcludePinned",
			SchemaName: "exclude_pinned",
			Null:       !g.Flags.Has(0),
		},
		{
			Name:       "OffsetDate",
			SchemaName: "offset_date",
		},
		{
			Name:       "OffsetID",
			SchemaName: "offset_id",
		},
		{
			Name:       "OffsetPeer",
			SchemaName: "offset_peer",
		},
		{
			Name:       "Limit",
			SchemaName: "limit",
		},
		{
			Name:       "Hash",
			SchemaName: "hash",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (g *MessagesGetSavedDialogsRequest) SetFlags() {
	if !(g.ExcludePinned == false) {
		g.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (g *MessagesGetSavedDialogsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getSavedDialogs#5381d21a as nil")
	}
	b.PutID(MessagesGetSavedDialogsRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *MessagesGetSavedDialogsRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getSavedDialogs#5381d21a as nil")
	}
	g.SetFlags()
	if err := g.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getSavedDialogs#5381d21a: field flags: %w", err)
	}
	b.PutInt(g.OffsetDate)
	b.PutInt(g.OffsetID)
	if g.OffsetPeer == nil {
		return fmt.Errorf("unable to encode messages.getSavedDialogs#5381d21a: field offset_peer is nil")
	}
	if err := g.OffsetPeer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getSavedDialogs#5381d21a: field offset_peer: %w", err)
	}
	b.PutInt(g.Limit)
	b.PutLong(g.Hash)
	return nil
}

// Decode implements bin.Decoder.
func (g *MessagesGetSavedDialogsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getSavedDialogs#5381d21a to nil")
	}
	if err := b.ConsumeID(MessagesGetSavedDialogsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.getSavedDialogs#5381d21a: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *MessagesGetSavedDialogsRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getSavedDialogs#5381d21a to nil")
	}
	{
		if err := g.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.getSavedDialogs#5381d21a: field flags: %w", err)
		}
	}
	g.ExcludePinned = g.Flags.Has(0)
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getSavedDialogs#5381d21a: field offset_date: %w", err)
		}
		g.OffsetDate = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getSavedDialogs#5381d21a: field offset_id: %w", err)
		}
		g.OffsetID = value
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getSavedDialogs#5381d21a: field offset_peer: %w", err)
		}
		g.OffsetPeer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getSavedDialogs#5381d21a: field limit: %w", err)
		}
		g.Limit = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getSavedDialogs#5381d21a: field hash: %w", err)
		}
		g.Hash = value
	}
	return nil
}

// SetExcludePinned sets value of ExcludePinned conditional field.
func (g *MessagesGetSavedDialogsRequest) SetExcludePinned(value bool) {
	if value {
		g.Flags.Set(0)
		g.ExcludePinned = true
	} else {
		g.Flags.Unset(0)
		g.ExcludePinned = false
	}
}

// GetExcludePinned returns value of ExcludePinned conditional field.
func (g *MessagesGetSavedDialogsRequest) GetExcludePinned() (value bool) {
	if g == nil {
		return
	}
	return g.Flags.Has(0)
}

// GetOffsetDate returns value of OffsetDate field.
func (g *MessagesGetSavedDialogsRequest) GetOffsetDate() (value int) {
	if g == nil {
		return
	}
	return g.OffsetDate
}

// GetOffsetID returns value of OffsetID field.
func (g *MessagesGetSavedDialogsRequest) GetOffsetID() (value int) {
	if g == nil {
		return
	}
	return g.OffsetID
}

// GetOffsetPeer returns value of OffsetPeer field.
func (g *MessagesGetSavedDialogsRequest) GetOffsetPeer() (value InputPeerClass) {
	if g == nil {
		return
	}
	return g.OffsetPeer
}

// GetLimit returns value of Limit field.
func (g *MessagesGetSavedDialogsRequest) GetLimit() (value int) {
	if g == nil {
		return
	}
	return g.Limit
}

// GetHash returns value of Hash field.
func (g *MessagesGetSavedDialogsRequest) GetHash() (value int64) {
	if g == nil {
		return
	}
	return g.Hash
}

// MessagesGetSavedDialogs invokes method messages.getSavedDialogs#5381d21a returning error if any.
//
// See https://core.telegram.org/method/messages.getSavedDialogs for reference.
func (c *Client) MessagesGetSavedDialogs(ctx context.Context, request *MessagesGetSavedDialogsRequest) (MessagesSavedDialogsClass, error) {
	var result MessagesSavedDialogsBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.SavedDialogs, nil
}
